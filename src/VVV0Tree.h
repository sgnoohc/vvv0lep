// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/ceph/cms/store/user/phchang/VVV0LepAnalysis/VVV0TreeDebug/debug_www.root", "t", "VVV0Tree", "tas", "vvv")

#ifndef VVV0Tree_H
#define VVV0Tree_H

#include "Math/LorentzVector.h"
#include "Math/GenVector/PtEtaPhiM4D.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PtEtaPhiM4D<float> > LorentzVector;

using namespace std; 
class VVV0Tree {
 private: 
 protected: 
  unsigned int index;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      year_;
  TBranch *year_branch;
  bool     year_isLoaded;
  float    genWeight_;
  TBranch *genWeight_branch;
  bool     genWeight_isLoaded;
  float    wgt_;
  TBranch *wgt_branch;
  bool     wgt_isLoaded;
  vector<float> *LHEReweightingWeight_;
  TBranch *LHEReweightingWeight_branch;
  bool     LHEReweightingWeight_isLoaded;
  float    prefireWgt_;
  TBranch *prefireWgt_branch;
  bool     prefireWgt_isLoaded;
  float    prefireWgtUp_;
  TBranch *prefireWgtUp_branch;
  bool     prefireWgtUp_isLoaded;
  float    prefireWgtDn_;
  TBranch *prefireWgtDn_branch;
  bool     prefireWgtDn_isLoaded;
  float    puWgt_;
  TBranch *puWgt_branch;
  bool     puWgt_isLoaded;
  float    puWgtUp_;
  TBranch *puWgtUp_branch;
  bool     puWgtUp_isLoaded;
  float    puWgtDn_;
  TBranch *puWgtDn_branch;
  bool     puWgtDn_isLoaded;
  float    trigWgt_;
  TBranch *trigWgt_branch;
  bool     trigWgt_isLoaded;
  float    trigWgtUp_;
  TBranch *trigWgtUp_branch;
  bool     trigWgtUp_isLoaded;
  float    trigWgtDn_;
  TBranch *trigWgtDn_branch;
  bool     trigWgtDn_isLoaded;
  int      trigger_;
  TBranch *trigger_branch;
  bool     trigger_isLoaded;
  int      is0Lep_;
  TBranch *is0Lep_branch;
  bool     is0Lep_isLoaded;
  int      is1Lep_;
  TBranch *is1Lep_branch;
  bool     is1Lep_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *Lep_;
  TBranch *Lep_branch;
  bool     Lep_isLoaded;
  int      LepFlav_;
  TBranch *LepFlav_branch;
  bool     LepFlav_isLoaded;
  int      NFJ_;
  TBranch *NFJ_branch;
  bool     NFJ_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0_;
  TBranch *FJ0_branch;
  bool     FJ0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1_;
  TBranch *FJ1_branch;
  bool     FJ1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2_;
  TBranch *FJ2_branch;
  bool     FJ2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3_;
  TBranch *FJ3_branch;
  bool     FJ3_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4_;
  TBranch *FJ4_branch;
  bool     FJ4_isLoaded;
  float    VMD0_;
  TBranch *VMD0_branch;
  bool     VMD0_isLoaded;
  float    VMD1_;
  TBranch *VMD1_branch;
  bool     VMD1_isLoaded;
  float    VMD2_;
  TBranch *VMD2_branch;
  bool     VMD2_isLoaded;
  float    VMD3_;
  TBranch *VMD3_branch;
  bool     VMD3_isLoaded;
  float    VMD4_;
  TBranch *VMD4_branch;
  bool     VMD4_isLoaded;
  float    WMD0_;
  TBranch *WMD0_branch;
  bool     WMD0_isLoaded;
  float    WMD1_;
  TBranch *WMD1_branch;
  bool     WMD1_isLoaded;
  float    WMD2_;
  TBranch *WMD2_branch;
  bool     WMD2_isLoaded;
  float    WMD3_;
  TBranch *WMD3_branch;
  bool     WMD3_isLoaded;
  float    WMD4_;
  TBranch *WMD4_branch;
  bool     WMD4_isLoaded;
  int      NQGen0_;
  TBranch *NQGen0_branch;
  bool     NQGen0_isLoaded;
  int      NQGen1_;
  TBranch *NQGen1_branch;
  bool     NQGen1_isLoaded;
  int      NQGen2_;
  TBranch *NQGen2_branch;
  bool     NQGen2_isLoaded;
  int      NQGen3_;
  TBranch *NQGen3_branch;
  bool     NQGen3_isLoaded;
  int      NQGen4_;
  TBranch *NQGen4_branch;
  bool     NQGen4_isLoaded;
  int      NBGen0_;
  TBranch *NBGen0_branch;
  bool     NBGen0_isLoaded;
  int      NBGen1_;
  TBranch *NBGen1_branch;
  bool     NBGen1_isLoaded;
  int      NBGen2_;
  TBranch *NBGen2_branch;
  bool     NBGen2_isLoaded;
  int      NBGen3_;
  TBranch *NBGen3_branch;
  bool     NBGen3_isLoaded;
  int      NBGen4_;
  TBranch *NBGen4_branch;
  bool     NBGen4_isLoaded;
  int      NLGen0_;
  TBranch *NLGen0_branch;
  bool     NLGen0_isLoaded;
  int      NLGen1_;
  TBranch *NLGen1_branch;
  bool     NLGen1_isLoaded;
  int      NLGen2_;
  TBranch *NLGen2_branch;
  bool     NLGen2_isLoaded;
  int      NLGen3_;
  TBranch *NLGen3_branch;
  bool     NLGen3_isLoaded;
  int      NLGen4_;
  TBranch *NLGen4_branch;
  bool     NLGen4_isLoaded;
  int      NiFJ_;
  TBranch *NiFJ_branch;
  bool     NiFJ_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0_;
  TBranch *iFJ0_branch;
  bool     iFJ0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1_;
  TBranch *iFJ1_branch;
  bool     iFJ1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2_;
  TBranch *iFJ2_branch;
  bool     iFJ2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3_;
  TBranch *iFJ3_branch;
  bool     iFJ3_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4_;
  TBranch *iFJ4_branch;
  bool     iFJ4_isLoaded;
  float    iVMD0_;
  TBranch *iVMD0_branch;
  bool     iVMD0_isLoaded;
  float    iVMD1_;
  TBranch *iVMD1_branch;
  bool     iVMD1_isLoaded;
  float    iVMD2_;
  TBranch *iVMD2_branch;
  bool     iVMD2_isLoaded;
  float    iVMD3_;
  TBranch *iVMD3_branch;
  bool     iVMD3_isLoaded;
  float    iVMD4_;
  TBranch *iVMD4_branch;
  bool     iVMD4_isLoaded;
  float    iWMD0_;
  TBranch *iWMD0_branch;
  bool     iWMD0_isLoaded;
  float    iWMD1_;
  TBranch *iWMD1_branch;
  bool     iWMD1_isLoaded;
  float    iWMD2_;
  TBranch *iWMD2_branch;
  bool     iWMD2_isLoaded;
  float    iWMD3_;
  TBranch *iWMD3_branch;
  bool     iWMD3_isLoaded;
  float    iWMD4_;
  TBranch *iWMD4_branch;
  bool     iWMD4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *MET_;
  TBranch *MET_branch;
  bool     MET_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *Nu_;
  TBranch *Nu_branch;
  bool     Nu_isLoaded;
  int      NJ_;
  TBranch *NJ_branch;
  bool     NJ_isLoaded;
  int      NbLoose_;
  TBranch *NbLoose_branch;
  bool     NbLoose_isLoaded;
  int      NbMedium_;
  TBranch *NbMedium_branch;
  bool     NbMedium_isLoaded;
  int      NbTight_;
  TBranch *NbTight_branch;
  bool     NbTight_isLoaded;
  int      NoORNbLoose_;
  TBranch *NoORNbLoose_branch;
  bool     NoORNbLoose_isLoaded;
  int      NoORNbMedium_;
  TBranch *NoORNbMedium_branch;
  bool     NoORNbMedium_isLoaded;
  int      NoORNbTight_;
  TBranch *NoORNbTight_branch;
  bool     NoORNbTight_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0_;
  TBranch *J0_branch;
  bool     J0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1_;
  TBranch *J1_branch;
  bool     J1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2_;
  TBranch *J2_branch;
  bool     J2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3_;
  TBranch *J3_branch;
  bool     J3_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4_;
  TBranch *J4_branch;
  bool     J4_isLoaded;
  float    MVVX_;
  TBranch *MVVX_branch;
  bool     MVVX_isLoaded;
  float    PtVVX_;
  TBranch *PtVVX_branch;
  bool     PtVVX_isLoaded;
  float    HT_;
  TBranch *HT_branch;
  bool     HT_isLoaded;
  float    HTJ_;
  TBranch *HTJ_branch;
  bool     HTJ_isLoaded;
  float    HTFJ_;
  TBranch *HTFJ_branch;
  bool     HTFJ_isLoaded;
  float    SumPtFJ_;
  TBranch *SumPtFJ_branch;
  bool     SumPtFJ_isLoaded;
  float    SumPtJ_;
  TBranch *SumPtJ_branch;
  bool     SumPtJ_isLoaded;
  int      NFJJESUp_;
  TBranch *NFJJESUp_branch;
  bool     NFJJESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JESUp_;
  TBranch *FJ0JESUp_branch;
  bool     FJ0JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JESUp_;
  TBranch *FJ1JESUp_branch;
  bool     FJ1JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JESUp_;
  TBranch *FJ2JESUp_branch;
  bool     FJ2JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JESUp_;
  TBranch *FJ3JESUp_branch;
  bool     FJ3JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JESUp_;
  TBranch *FJ4JESUp_branch;
  bool     FJ4JESUp_isLoaded;
  float    VMD0JESUp_;
  TBranch *VMD0JESUp_branch;
  bool     VMD0JESUp_isLoaded;
  float    VMD1JESUp_;
  TBranch *VMD1JESUp_branch;
  bool     VMD1JESUp_isLoaded;
  float    VMD2JESUp_;
  TBranch *VMD2JESUp_branch;
  bool     VMD2JESUp_isLoaded;
  float    VMD3JESUp_;
  TBranch *VMD3JESUp_branch;
  bool     VMD3JESUp_isLoaded;
  float    VMD4JESUp_;
  TBranch *VMD4JESUp_branch;
  bool     VMD4JESUp_isLoaded;
  float    WMD0JESUp_;
  TBranch *WMD0JESUp_branch;
  bool     WMD0JESUp_isLoaded;
  float    WMD1JESUp_;
  TBranch *WMD1JESUp_branch;
  bool     WMD1JESUp_isLoaded;
  float    WMD2JESUp_;
  TBranch *WMD2JESUp_branch;
  bool     WMD2JESUp_isLoaded;
  float    WMD3JESUp_;
  TBranch *WMD3JESUp_branch;
  bool     WMD3JESUp_isLoaded;
  float    WMD4JESUp_;
  TBranch *WMD4JESUp_branch;
  bool     WMD4JESUp_isLoaded;
  int      NQGen0JESUp_;
  TBranch *NQGen0JESUp_branch;
  bool     NQGen0JESUp_isLoaded;
  int      NQGen1JESUp_;
  TBranch *NQGen1JESUp_branch;
  bool     NQGen1JESUp_isLoaded;
  int      NQGen2JESUp_;
  TBranch *NQGen2JESUp_branch;
  bool     NQGen2JESUp_isLoaded;
  int      NQGen3JESUp_;
  TBranch *NQGen3JESUp_branch;
  bool     NQGen3JESUp_isLoaded;
  int      NQGen4JESUp_;
  TBranch *NQGen4JESUp_branch;
  bool     NQGen4JESUp_isLoaded;
  int      NBGen0JESUp_;
  TBranch *NBGen0JESUp_branch;
  bool     NBGen0JESUp_isLoaded;
  int      NBGen1JESUp_;
  TBranch *NBGen1JESUp_branch;
  bool     NBGen1JESUp_isLoaded;
  int      NBGen2JESUp_;
  TBranch *NBGen2JESUp_branch;
  bool     NBGen2JESUp_isLoaded;
  int      NBGen3JESUp_;
  TBranch *NBGen3JESUp_branch;
  bool     NBGen3JESUp_isLoaded;
  int      NBGen4JESUp_;
  TBranch *NBGen4JESUp_branch;
  bool     NBGen4JESUp_isLoaded;
  int      NLGen0JESUp_;
  TBranch *NLGen0JESUp_branch;
  bool     NLGen0JESUp_isLoaded;
  int      NLGen1JESUp_;
  TBranch *NLGen1JESUp_branch;
  bool     NLGen1JESUp_isLoaded;
  int      NLGen2JESUp_;
  TBranch *NLGen2JESUp_branch;
  bool     NLGen2JESUp_isLoaded;
  int      NLGen3JESUp_;
  TBranch *NLGen3JESUp_branch;
  bool     NLGen3JESUp_isLoaded;
  int      NLGen4JESUp_;
  TBranch *NLGen4JESUp_branch;
  bool     NLGen4JESUp_isLoaded;
  int      NiFJJESUp_;
  TBranch *NiFJJESUp_branch;
  bool     NiFJJESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JESUp_;
  TBranch *iFJ0JESUp_branch;
  bool     iFJ0JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JESUp_;
  TBranch *iFJ1JESUp_branch;
  bool     iFJ1JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JESUp_;
  TBranch *iFJ2JESUp_branch;
  bool     iFJ2JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JESUp_;
  TBranch *iFJ3JESUp_branch;
  bool     iFJ3JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JESUp_;
  TBranch *iFJ4JESUp_branch;
  bool     iFJ4JESUp_isLoaded;
  float    iVMD0JESUp_;
  TBranch *iVMD0JESUp_branch;
  bool     iVMD0JESUp_isLoaded;
  float    iVMD1JESUp_;
  TBranch *iVMD1JESUp_branch;
  bool     iVMD1JESUp_isLoaded;
  float    iVMD2JESUp_;
  TBranch *iVMD2JESUp_branch;
  bool     iVMD2JESUp_isLoaded;
  float    iVMD3JESUp_;
  TBranch *iVMD3JESUp_branch;
  bool     iVMD3JESUp_isLoaded;
  float    iVMD4JESUp_;
  TBranch *iVMD4JESUp_branch;
  bool     iVMD4JESUp_isLoaded;
  float    iWMD0JESUp_;
  TBranch *iWMD0JESUp_branch;
  bool     iWMD0JESUp_isLoaded;
  float    iWMD1JESUp_;
  TBranch *iWMD1JESUp_branch;
  bool     iWMD1JESUp_isLoaded;
  float    iWMD2JESUp_;
  TBranch *iWMD2JESUp_branch;
  bool     iWMD2JESUp_isLoaded;
  float    iWMD3JESUp_;
  TBranch *iWMD3JESUp_branch;
  bool     iWMD3JESUp_isLoaded;
  float    iWMD4JESUp_;
  TBranch *iWMD4JESUp_branch;
  bool     iWMD4JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJESUp_;
  TBranch *METJESUp_branch;
  bool     METJESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJESUp_;
  TBranch *NuJESUp_branch;
  bool     NuJESUp_isLoaded;
  int      NJJESUp_;
  TBranch *NJJESUp_branch;
  bool     NJJESUp_isLoaded;
  int      NbLooseJESUp_;
  TBranch *NbLooseJESUp_branch;
  bool     NbLooseJESUp_isLoaded;
  int      NbMediumJESUp_;
  TBranch *NbMediumJESUp_branch;
  bool     NbMediumJESUp_isLoaded;
  int      NbTightJESUp_;
  TBranch *NbTightJESUp_branch;
  bool     NbTightJESUp_isLoaded;
  int      NoORNbLooseJESUp_;
  TBranch *NoORNbLooseJESUp_branch;
  bool     NoORNbLooseJESUp_isLoaded;
  int      NoORNbMediumJESUp_;
  TBranch *NoORNbMediumJESUp_branch;
  bool     NoORNbMediumJESUp_isLoaded;
  int      NoORNbTightJESUp_;
  TBranch *NoORNbTightJESUp_branch;
  bool     NoORNbTightJESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JESUp_;
  TBranch *J0JESUp_branch;
  bool     J0JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JESUp_;
  TBranch *J1JESUp_branch;
  bool     J1JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JESUp_;
  TBranch *J2JESUp_branch;
  bool     J2JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JESUp_;
  TBranch *J3JESUp_branch;
  bool     J3JESUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JESUp_;
  TBranch *J4JESUp_branch;
  bool     J4JESUp_isLoaded;
  float    MVVXJESUp_;
  TBranch *MVVXJESUp_branch;
  bool     MVVXJESUp_isLoaded;
  float    PtVVXJESUp_;
  TBranch *PtVVXJESUp_branch;
  bool     PtVVXJESUp_isLoaded;
  float    HTJESUp_;
  TBranch *HTJESUp_branch;
  bool     HTJESUp_isLoaded;
  float    HTJJESUp_;
  TBranch *HTJJESUp_branch;
  bool     HTJJESUp_isLoaded;
  float    HTFJJESUp_;
  TBranch *HTFJJESUp_branch;
  bool     HTFJJESUp_isLoaded;
  float    SumPtFJJESUp_;
  TBranch *SumPtFJJESUp_branch;
  bool     SumPtFJJESUp_isLoaded;
  float    SumPtJJESUp_;
  TBranch *SumPtJJESUp_branch;
  bool     SumPtJJESUp_isLoaded;
  int      NFJJESDn_;
  TBranch *NFJJESDn_branch;
  bool     NFJJESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JESDn_;
  TBranch *FJ0JESDn_branch;
  bool     FJ0JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JESDn_;
  TBranch *FJ1JESDn_branch;
  bool     FJ1JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JESDn_;
  TBranch *FJ2JESDn_branch;
  bool     FJ2JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JESDn_;
  TBranch *FJ3JESDn_branch;
  bool     FJ3JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JESDn_;
  TBranch *FJ4JESDn_branch;
  bool     FJ4JESDn_isLoaded;
  float    VMD0JESDn_;
  TBranch *VMD0JESDn_branch;
  bool     VMD0JESDn_isLoaded;
  float    VMD1JESDn_;
  TBranch *VMD1JESDn_branch;
  bool     VMD1JESDn_isLoaded;
  float    VMD2JESDn_;
  TBranch *VMD2JESDn_branch;
  bool     VMD2JESDn_isLoaded;
  float    VMD3JESDn_;
  TBranch *VMD3JESDn_branch;
  bool     VMD3JESDn_isLoaded;
  float    VMD4JESDn_;
  TBranch *VMD4JESDn_branch;
  bool     VMD4JESDn_isLoaded;
  float    WMD0JESDn_;
  TBranch *WMD0JESDn_branch;
  bool     WMD0JESDn_isLoaded;
  float    WMD1JESDn_;
  TBranch *WMD1JESDn_branch;
  bool     WMD1JESDn_isLoaded;
  float    WMD2JESDn_;
  TBranch *WMD2JESDn_branch;
  bool     WMD2JESDn_isLoaded;
  float    WMD3JESDn_;
  TBranch *WMD3JESDn_branch;
  bool     WMD3JESDn_isLoaded;
  float    WMD4JESDn_;
  TBranch *WMD4JESDn_branch;
  bool     WMD4JESDn_isLoaded;
  int      NQGen0JESDn_;
  TBranch *NQGen0JESDn_branch;
  bool     NQGen0JESDn_isLoaded;
  int      NQGen1JESDn_;
  TBranch *NQGen1JESDn_branch;
  bool     NQGen1JESDn_isLoaded;
  int      NQGen2JESDn_;
  TBranch *NQGen2JESDn_branch;
  bool     NQGen2JESDn_isLoaded;
  int      NQGen3JESDn_;
  TBranch *NQGen3JESDn_branch;
  bool     NQGen3JESDn_isLoaded;
  int      NQGen4JESDn_;
  TBranch *NQGen4JESDn_branch;
  bool     NQGen4JESDn_isLoaded;
  int      NBGen0JESDn_;
  TBranch *NBGen0JESDn_branch;
  bool     NBGen0JESDn_isLoaded;
  int      NBGen1JESDn_;
  TBranch *NBGen1JESDn_branch;
  bool     NBGen1JESDn_isLoaded;
  int      NBGen2JESDn_;
  TBranch *NBGen2JESDn_branch;
  bool     NBGen2JESDn_isLoaded;
  int      NBGen3JESDn_;
  TBranch *NBGen3JESDn_branch;
  bool     NBGen3JESDn_isLoaded;
  int      NBGen4JESDn_;
  TBranch *NBGen4JESDn_branch;
  bool     NBGen4JESDn_isLoaded;
  int      NLGen0JESDn_;
  TBranch *NLGen0JESDn_branch;
  bool     NLGen0JESDn_isLoaded;
  int      NLGen1JESDn_;
  TBranch *NLGen1JESDn_branch;
  bool     NLGen1JESDn_isLoaded;
  int      NLGen2JESDn_;
  TBranch *NLGen2JESDn_branch;
  bool     NLGen2JESDn_isLoaded;
  int      NLGen3JESDn_;
  TBranch *NLGen3JESDn_branch;
  bool     NLGen3JESDn_isLoaded;
  int      NLGen4JESDn_;
  TBranch *NLGen4JESDn_branch;
  bool     NLGen4JESDn_isLoaded;
  int      NiFJJESDn_;
  TBranch *NiFJJESDn_branch;
  bool     NiFJJESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JESDn_;
  TBranch *iFJ0JESDn_branch;
  bool     iFJ0JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JESDn_;
  TBranch *iFJ1JESDn_branch;
  bool     iFJ1JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JESDn_;
  TBranch *iFJ2JESDn_branch;
  bool     iFJ2JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JESDn_;
  TBranch *iFJ3JESDn_branch;
  bool     iFJ3JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JESDn_;
  TBranch *iFJ4JESDn_branch;
  bool     iFJ4JESDn_isLoaded;
  float    iVMD0JESDn_;
  TBranch *iVMD0JESDn_branch;
  bool     iVMD0JESDn_isLoaded;
  float    iVMD1JESDn_;
  TBranch *iVMD1JESDn_branch;
  bool     iVMD1JESDn_isLoaded;
  float    iVMD2JESDn_;
  TBranch *iVMD2JESDn_branch;
  bool     iVMD2JESDn_isLoaded;
  float    iVMD3JESDn_;
  TBranch *iVMD3JESDn_branch;
  bool     iVMD3JESDn_isLoaded;
  float    iVMD4JESDn_;
  TBranch *iVMD4JESDn_branch;
  bool     iVMD4JESDn_isLoaded;
  float    iWMD0JESDn_;
  TBranch *iWMD0JESDn_branch;
  bool     iWMD0JESDn_isLoaded;
  float    iWMD1JESDn_;
  TBranch *iWMD1JESDn_branch;
  bool     iWMD1JESDn_isLoaded;
  float    iWMD2JESDn_;
  TBranch *iWMD2JESDn_branch;
  bool     iWMD2JESDn_isLoaded;
  float    iWMD3JESDn_;
  TBranch *iWMD3JESDn_branch;
  bool     iWMD3JESDn_isLoaded;
  float    iWMD4JESDn_;
  TBranch *iWMD4JESDn_branch;
  bool     iWMD4JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJESDn_;
  TBranch *METJESDn_branch;
  bool     METJESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJESDn_;
  TBranch *NuJESDn_branch;
  bool     NuJESDn_isLoaded;
  int      NJJESDn_;
  TBranch *NJJESDn_branch;
  bool     NJJESDn_isLoaded;
  int      NbLooseJESDn_;
  TBranch *NbLooseJESDn_branch;
  bool     NbLooseJESDn_isLoaded;
  int      NbMediumJESDn_;
  TBranch *NbMediumJESDn_branch;
  bool     NbMediumJESDn_isLoaded;
  int      NbTightJESDn_;
  TBranch *NbTightJESDn_branch;
  bool     NbTightJESDn_isLoaded;
  int      NoORNbLooseJESDn_;
  TBranch *NoORNbLooseJESDn_branch;
  bool     NoORNbLooseJESDn_isLoaded;
  int      NoORNbMediumJESDn_;
  TBranch *NoORNbMediumJESDn_branch;
  bool     NoORNbMediumJESDn_isLoaded;
  int      NoORNbTightJESDn_;
  TBranch *NoORNbTightJESDn_branch;
  bool     NoORNbTightJESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JESDn_;
  TBranch *J0JESDn_branch;
  bool     J0JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JESDn_;
  TBranch *J1JESDn_branch;
  bool     J1JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JESDn_;
  TBranch *J2JESDn_branch;
  bool     J2JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JESDn_;
  TBranch *J3JESDn_branch;
  bool     J3JESDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JESDn_;
  TBranch *J4JESDn_branch;
  bool     J4JESDn_isLoaded;
  float    MVVXJESDn_;
  TBranch *MVVXJESDn_branch;
  bool     MVVXJESDn_isLoaded;
  float    PtVVXJESDn_;
  TBranch *PtVVXJESDn_branch;
  bool     PtVVXJESDn_isLoaded;
  float    HTJESDn_;
  TBranch *HTJESDn_branch;
  bool     HTJESDn_isLoaded;
  float    HTJJESDn_;
  TBranch *HTJJESDn_branch;
  bool     HTJJESDn_isLoaded;
  float    HTFJJESDn_;
  TBranch *HTFJJESDn_branch;
  bool     HTFJJESDn_isLoaded;
  float    SumPtFJJESDn_;
  TBranch *SumPtFJJESDn_branch;
  bool     SumPtFJJESDn_isLoaded;
  float    SumPtJJESDn_;
  TBranch *SumPtJJESDn_branch;
  bool     SumPtJJESDn_isLoaded;
  int      NFJJERUp_;
  TBranch *NFJJERUp_branch;
  bool     NFJJERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JERUp_;
  TBranch *FJ0JERUp_branch;
  bool     FJ0JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JERUp_;
  TBranch *FJ1JERUp_branch;
  bool     FJ1JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JERUp_;
  TBranch *FJ2JERUp_branch;
  bool     FJ2JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JERUp_;
  TBranch *FJ3JERUp_branch;
  bool     FJ3JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JERUp_;
  TBranch *FJ4JERUp_branch;
  bool     FJ4JERUp_isLoaded;
  float    VMD0JERUp_;
  TBranch *VMD0JERUp_branch;
  bool     VMD0JERUp_isLoaded;
  float    VMD1JERUp_;
  TBranch *VMD1JERUp_branch;
  bool     VMD1JERUp_isLoaded;
  float    VMD2JERUp_;
  TBranch *VMD2JERUp_branch;
  bool     VMD2JERUp_isLoaded;
  float    VMD3JERUp_;
  TBranch *VMD3JERUp_branch;
  bool     VMD3JERUp_isLoaded;
  float    VMD4JERUp_;
  TBranch *VMD4JERUp_branch;
  bool     VMD4JERUp_isLoaded;
  float    WMD0JERUp_;
  TBranch *WMD0JERUp_branch;
  bool     WMD0JERUp_isLoaded;
  float    WMD1JERUp_;
  TBranch *WMD1JERUp_branch;
  bool     WMD1JERUp_isLoaded;
  float    WMD2JERUp_;
  TBranch *WMD2JERUp_branch;
  bool     WMD2JERUp_isLoaded;
  float    WMD3JERUp_;
  TBranch *WMD3JERUp_branch;
  bool     WMD3JERUp_isLoaded;
  float    WMD4JERUp_;
  TBranch *WMD4JERUp_branch;
  bool     WMD4JERUp_isLoaded;
  int      NQGen0JERUp_;
  TBranch *NQGen0JERUp_branch;
  bool     NQGen0JERUp_isLoaded;
  int      NQGen1JERUp_;
  TBranch *NQGen1JERUp_branch;
  bool     NQGen1JERUp_isLoaded;
  int      NQGen2JERUp_;
  TBranch *NQGen2JERUp_branch;
  bool     NQGen2JERUp_isLoaded;
  int      NQGen3JERUp_;
  TBranch *NQGen3JERUp_branch;
  bool     NQGen3JERUp_isLoaded;
  int      NQGen4JERUp_;
  TBranch *NQGen4JERUp_branch;
  bool     NQGen4JERUp_isLoaded;
  int      NBGen0JERUp_;
  TBranch *NBGen0JERUp_branch;
  bool     NBGen0JERUp_isLoaded;
  int      NBGen1JERUp_;
  TBranch *NBGen1JERUp_branch;
  bool     NBGen1JERUp_isLoaded;
  int      NBGen2JERUp_;
  TBranch *NBGen2JERUp_branch;
  bool     NBGen2JERUp_isLoaded;
  int      NBGen3JERUp_;
  TBranch *NBGen3JERUp_branch;
  bool     NBGen3JERUp_isLoaded;
  int      NBGen4JERUp_;
  TBranch *NBGen4JERUp_branch;
  bool     NBGen4JERUp_isLoaded;
  int      NLGen0JERUp_;
  TBranch *NLGen0JERUp_branch;
  bool     NLGen0JERUp_isLoaded;
  int      NLGen1JERUp_;
  TBranch *NLGen1JERUp_branch;
  bool     NLGen1JERUp_isLoaded;
  int      NLGen2JERUp_;
  TBranch *NLGen2JERUp_branch;
  bool     NLGen2JERUp_isLoaded;
  int      NLGen3JERUp_;
  TBranch *NLGen3JERUp_branch;
  bool     NLGen3JERUp_isLoaded;
  int      NLGen4JERUp_;
  TBranch *NLGen4JERUp_branch;
  bool     NLGen4JERUp_isLoaded;
  int      NiFJJERUp_;
  TBranch *NiFJJERUp_branch;
  bool     NiFJJERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JERUp_;
  TBranch *iFJ0JERUp_branch;
  bool     iFJ0JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JERUp_;
  TBranch *iFJ1JERUp_branch;
  bool     iFJ1JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JERUp_;
  TBranch *iFJ2JERUp_branch;
  bool     iFJ2JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JERUp_;
  TBranch *iFJ3JERUp_branch;
  bool     iFJ3JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JERUp_;
  TBranch *iFJ4JERUp_branch;
  bool     iFJ4JERUp_isLoaded;
  float    iVMD0JERUp_;
  TBranch *iVMD0JERUp_branch;
  bool     iVMD0JERUp_isLoaded;
  float    iVMD1JERUp_;
  TBranch *iVMD1JERUp_branch;
  bool     iVMD1JERUp_isLoaded;
  float    iVMD2JERUp_;
  TBranch *iVMD2JERUp_branch;
  bool     iVMD2JERUp_isLoaded;
  float    iVMD3JERUp_;
  TBranch *iVMD3JERUp_branch;
  bool     iVMD3JERUp_isLoaded;
  float    iVMD4JERUp_;
  TBranch *iVMD4JERUp_branch;
  bool     iVMD4JERUp_isLoaded;
  float    iWMD0JERUp_;
  TBranch *iWMD0JERUp_branch;
  bool     iWMD0JERUp_isLoaded;
  float    iWMD1JERUp_;
  TBranch *iWMD1JERUp_branch;
  bool     iWMD1JERUp_isLoaded;
  float    iWMD2JERUp_;
  TBranch *iWMD2JERUp_branch;
  bool     iWMD2JERUp_isLoaded;
  float    iWMD3JERUp_;
  TBranch *iWMD3JERUp_branch;
  bool     iWMD3JERUp_isLoaded;
  float    iWMD4JERUp_;
  TBranch *iWMD4JERUp_branch;
  bool     iWMD4JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJERUp_;
  TBranch *METJERUp_branch;
  bool     METJERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJERUp_;
  TBranch *NuJERUp_branch;
  bool     NuJERUp_isLoaded;
  int      NJJERUp_;
  TBranch *NJJERUp_branch;
  bool     NJJERUp_isLoaded;
  int      NbLooseJERUp_;
  TBranch *NbLooseJERUp_branch;
  bool     NbLooseJERUp_isLoaded;
  int      NbMediumJERUp_;
  TBranch *NbMediumJERUp_branch;
  bool     NbMediumJERUp_isLoaded;
  int      NbTightJERUp_;
  TBranch *NbTightJERUp_branch;
  bool     NbTightJERUp_isLoaded;
  int      NoORNbLooseJERUp_;
  TBranch *NoORNbLooseJERUp_branch;
  bool     NoORNbLooseJERUp_isLoaded;
  int      NoORNbMediumJERUp_;
  TBranch *NoORNbMediumJERUp_branch;
  bool     NoORNbMediumJERUp_isLoaded;
  int      NoORNbTightJERUp_;
  TBranch *NoORNbTightJERUp_branch;
  bool     NoORNbTightJERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JERUp_;
  TBranch *J0JERUp_branch;
  bool     J0JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JERUp_;
  TBranch *J1JERUp_branch;
  bool     J1JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JERUp_;
  TBranch *J2JERUp_branch;
  bool     J2JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JERUp_;
  TBranch *J3JERUp_branch;
  bool     J3JERUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JERUp_;
  TBranch *J4JERUp_branch;
  bool     J4JERUp_isLoaded;
  float    MVVXJERUp_;
  TBranch *MVVXJERUp_branch;
  bool     MVVXJERUp_isLoaded;
  float    PtVVXJERUp_;
  TBranch *PtVVXJERUp_branch;
  bool     PtVVXJERUp_isLoaded;
  float    HTJERUp_;
  TBranch *HTJERUp_branch;
  bool     HTJERUp_isLoaded;
  float    HTJJERUp_;
  TBranch *HTJJERUp_branch;
  bool     HTJJERUp_isLoaded;
  float    HTFJJERUp_;
  TBranch *HTFJJERUp_branch;
  bool     HTFJJERUp_isLoaded;
  float    SumPtFJJERUp_;
  TBranch *SumPtFJJERUp_branch;
  bool     SumPtFJJERUp_isLoaded;
  float    SumPtJJERUp_;
  TBranch *SumPtJJERUp_branch;
  bool     SumPtJJERUp_isLoaded;
  int      NFJJERDn_;
  TBranch *NFJJERDn_branch;
  bool     NFJJERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JERDn_;
  TBranch *FJ0JERDn_branch;
  bool     FJ0JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JERDn_;
  TBranch *FJ1JERDn_branch;
  bool     FJ1JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JERDn_;
  TBranch *FJ2JERDn_branch;
  bool     FJ2JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JERDn_;
  TBranch *FJ3JERDn_branch;
  bool     FJ3JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JERDn_;
  TBranch *FJ4JERDn_branch;
  bool     FJ4JERDn_isLoaded;
  float    VMD0JERDn_;
  TBranch *VMD0JERDn_branch;
  bool     VMD0JERDn_isLoaded;
  float    VMD1JERDn_;
  TBranch *VMD1JERDn_branch;
  bool     VMD1JERDn_isLoaded;
  float    VMD2JERDn_;
  TBranch *VMD2JERDn_branch;
  bool     VMD2JERDn_isLoaded;
  float    VMD3JERDn_;
  TBranch *VMD3JERDn_branch;
  bool     VMD3JERDn_isLoaded;
  float    VMD4JERDn_;
  TBranch *VMD4JERDn_branch;
  bool     VMD4JERDn_isLoaded;
  float    WMD0JERDn_;
  TBranch *WMD0JERDn_branch;
  bool     WMD0JERDn_isLoaded;
  float    WMD1JERDn_;
  TBranch *WMD1JERDn_branch;
  bool     WMD1JERDn_isLoaded;
  float    WMD2JERDn_;
  TBranch *WMD2JERDn_branch;
  bool     WMD2JERDn_isLoaded;
  float    WMD3JERDn_;
  TBranch *WMD3JERDn_branch;
  bool     WMD3JERDn_isLoaded;
  float    WMD4JERDn_;
  TBranch *WMD4JERDn_branch;
  bool     WMD4JERDn_isLoaded;
  int      NQGen0JERDn_;
  TBranch *NQGen0JERDn_branch;
  bool     NQGen0JERDn_isLoaded;
  int      NQGen1JERDn_;
  TBranch *NQGen1JERDn_branch;
  bool     NQGen1JERDn_isLoaded;
  int      NQGen2JERDn_;
  TBranch *NQGen2JERDn_branch;
  bool     NQGen2JERDn_isLoaded;
  int      NQGen3JERDn_;
  TBranch *NQGen3JERDn_branch;
  bool     NQGen3JERDn_isLoaded;
  int      NQGen4JERDn_;
  TBranch *NQGen4JERDn_branch;
  bool     NQGen4JERDn_isLoaded;
  int      NBGen0JERDn_;
  TBranch *NBGen0JERDn_branch;
  bool     NBGen0JERDn_isLoaded;
  int      NBGen1JERDn_;
  TBranch *NBGen1JERDn_branch;
  bool     NBGen1JERDn_isLoaded;
  int      NBGen2JERDn_;
  TBranch *NBGen2JERDn_branch;
  bool     NBGen2JERDn_isLoaded;
  int      NBGen3JERDn_;
  TBranch *NBGen3JERDn_branch;
  bool     NBGen3JERDn_isLoaded;
  int      NBGen4JERDn_;
  TBranch *NBGen4JERDn_branch;
  bool     NBGen4JERDn_isLoaded;
  int      NLGen0JERDn_;
  TBranch *NLGen0JERDn_branch;
  bool     NLGen0JERDn_isLoaded;
  int      NLGen1JERDn_;
  TBranch *NLGen1JERDn_branch;
  bool     NLGen1JERDn_isLoaded;
  int      NLGen2JERDn_;
  TBranch *NLGen2JERDn_branch;
  bool     NLGen2JERDn_isLoaded;
  int      NLGen3JERDn_;
  TBranch *NLGen3JERDn_branch;
  bool     NLGen3JERDn_isLoaded;
  int      NLGen4JERDn_;
  TBranch *NLGen4JERDn_branch;
  bool     NLGen4JERDn_isLoaded;
  int      NiFJJERDn_;
  TBranch *NiFJJERDn_branch;
  bool     NiFJJERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JERDn_;
  TBranch *iFJ0JERDn_branch;
  bool     iFJ0JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JERDn_;
  TBranch *iFJ1JERDn_branch;
  bool     iFJ1JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JERDn_;
  TBranch *iFJ2JERDn_branch;
  bool     iFJ2JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JERDn_;
  TBranch *iFJ3JERDn_branch;
  bool     iFJ3JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JERDn_;
  TBranch *iFJ4JERDn_branch;
  bool     iFJ4JERDn_isLoaded;
  float    iVMD0JERDn_;
  TBranch *iVMD0JERDn_branch;
  bool     iVMD0JERDn_isLoaded;
  float    iVMD1JERDn_;
  TBranch *iVMD1JERDn_branch;
  bool     iVMD1JERDn_isLoaded;
  float    iVMD2JERDn_;
  TBranch *iVMD2JERDn_branch;
  bool     iVMD2JERDn_isLoaded;
  float    iVMD3JERDn_;
  TBranch *iVMD3JERDn_branch;
  bool     iVMD3JERDn_isLoaded;
  float    iVMD4JERDn_;
  TBranch *iVMD4JERDn_branch;
  bool     iVMD4JERDn_isLoaded;
  float    iWMD0JERDn_;
  TBranch *iWMD0JERDn_branch;
  bool     iWMD0JERDn_isLoaded;
  float    iWMD1JERDn_;
  TBranch *iWMD1JERDn_branch;
  bool     iWMD1JERDn_isLoaded;
  float    iWMD2JERDn_;
  TBranch *iWMD2JERDn_branch;
  bool     iWMD2JERDn_isLoaded;
  float    iWMD3JERDn_;
  TBranch *iWMD3JERDn_branch;
  bool     iWMD3JERDn_isLoaded;
  float    iWMD4JERDn_;
  TBranch *iWMD4JERDn_branch;
  bool     iWMD4JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJERDn_;
  TBranch *METJERDn_branch;
  bool     METJERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJERDn_;
  TBranch *NuJERDn_branch;
  bool     NuJERDn_isLoaded;
  int      NJJERDn_;
  TBranch *NJJERDn_branch;
  bool     NJJERDn_isLoaded;
  int      NbLooseJERDn_;
  TBranch *NbLooseJERDn_branch;
  bool     NbLooseJERDn_isLoaded;
  int      NbMediumJERDn_;
  TBranch *NbMediumJERDn_branch;
  bool     NbMediumJERDn_isLoaded;
  int      NbTightJERDn_;
  TBranch *NbTightJERDn_branch;
  bool     NbTightJERDn_isLoaded;
  int      NoORNbLooseJERDn_;
  TBranch *NoORNbLooseJERDn_branch;
  bool     NoORNbLooseJERDn_isLoaded;
  int      NoORNbMediumJERDn_;
  TBranch *NoORNbMediumJERDn_branch;
  bool     NoORNbMediumJERDn_isLoaded;
  int      NoORNbTightJERDn_;
  TBranch *NoORNbTightJERDn_branch;
  bool     NoORNbTightJERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JERDn_;
  TBranch *J0JERDn_branch;
  bool     J0JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JERDn_;
  TBranch *J1JERDn_branch;
  bool     J1JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JERDn_;
  TBranch *J2JERDn_branch;
  bool     J2JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JERDn_;
  TBranch *J3JERDn_branch;
  bool     J3JERDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JERDn_;
  TBranch *J4JERDn_branch;
  bool     J4JERDn_isLoaded;
  float    MVVXJERDn_;
  TBranch *MVVXJERDn_branch;
  bool     MVVXJERDn_isLoaded;
  float    PtVVXJERDn_;
  TBranch *PtVVXJERDn_branch;
  bool     PtVVXJERDn_isLoaded;
  float    HTJERDn_;
  TBranch *HTJERDn_branch;
  bool     HTJERDn_isLoaded;
  float    HTJJERDn_;
  TBranch *HTJJERDn_branch;
  bool     HTJJERDn_isLoaded;
  float    HTFJJERDn_;
  TBranch *HTFJJERDn_branch;
  bool     HTFJJERDn_isLoaded;
  float    SumPtFJJERDn_;
  TBranch *SumPtFJJERDn_branch;
  bool     SumPtFJJERDn_isLoaded;
  float    SumPtJJERDn_;
  TBranch *SumPtJJERDn_branch;
  bool     SumPtJJERDn_isLoaded;
  int      NFJJMSUp_;
  TBranch *NFJJMSUp_branch;
  bool     NFJJMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JMSUp_;
  TBranch *FJ0JMSUp_branch;
  bool     FJ0JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JMSUp_;
  TBranch *FJ1JMSUp_branch;
  bool     FJ1JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JMSUp_;
  TBranch *FJ2JMSUp_branch;
  bool     FJ2JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JMSUp_;
  TBranch *FJ3JMSUp_branch;
  bool     FJ3JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JMSUp_;
  TBranch *FJ4JMSUp_branch;
  bool     FJ4JMSUp_isLoaded;
  float    VMD0JMSUp_;
  TBranch *VMD0JMSUp_branch;
  bool     VMD0JMSUp_isLoaded;
  float    VMD1JMSUp_;
  TBranch *VMD1JMSUp_branch;
  bool     VMD1JMSUp_isLoaded;
  float    VMD2JMSUp_;
  TBranch *VMD2JMSUp_branch;
  bool     VMD2JMSUp_isLoaded;
  float    VMD3JMSUp_;
  TBranch *VMD3JMSUp_branch;
  bool     VMD3JMSUp_isLoaded;
  float    VMD4JMSUp_;
  TBranch *VMD4JMSUp_branch;
  bool     VMD4JMSUp_isLoaded;
  float    WMD0JMSUp_;
  TBranch *WMD0JMSUp_branch;
  bool     WMD0JMSUp_isLoaded;
  float    WMD1JMSUp_;
  TBranch *WMD1JMSUp_branch;
  bool     WMD1JMSUp_isLoaded;
  float    WMD2JMSUp_;
  TBranch *WMD2JMSUp_branch;
  bool     WMD2JMSUp_isLoaded;
  float    WMD3JMSUp_;
  TBranch *WMD3JMSUp_branch;
  bool     WMD3JMSUp_isLoaded;
  float    WMD4JMSUp_;
  TBranch *WMD4JMSUp_branch;
  bool     WMD4JMSUp_isLoaded;
  int      NQGen0JMSUp_;
  TBranch *NQGen0JMSUp_branch;
  bool     NQGen0JMSUp_isLoaded;
  int      NQGen1JMSUp_;
  TBranch *NQGen1JMSUp_branch;
  bool     NQGen1JMSUp_isLoaded;
  int      NQGen2JMSUp_;
  TBranch *NQGen2JMSUp_branch;
  bool     NQGen2JMSUp_isLoaded;
  int      NQGen3JMSUp_;
  TBranch *NQGen3JMSUp_branch;
  bool     NQGen3JMSUp_isLoaded;
  int      NQGen4JMSUp_;
  TBranch *NQGen4JMSUp_branch;
  bool     NQGen4JMSUp_isLoaded;
  int      NBGen0JMSUp_;
  TBranch *NBGen0JMSUp_branch;
  bool     NBGen0JMSUp_isLoaded;
  int      NBGen1JMSUp_;
  TBranch *NBGen1JMSUp_branch;
  bool     NBGen1JMSUp_isLoaded;
  int      NBGen2JMSUp_;
  TBranch *NBGen2JMSUp_branch;
  bool     NBGen2JMSUp_isLoaded;
  int      NBGen3JMSUp_;
  TBranch *NBGen3JMSUp_branch;
  bool     NBGen3JMSUp_isLoaded;
  int      NBGen4JMSUp_;
  TBranch *NBGen4JMSUp_branch;
  bool     NBGen4JMSUp_isLoaded;
  int      NLGen0JMSUp_;
  TBranch *NLGen0JMSUp_branch;
  bool     NLGen0JMSUp_isLoaded;
  int      NLGen1JMSUp_;
  TBranch *NLGen1JMSUp_branch;
  bool     NLGen1JMSUp_isLoaded;
  int      NLGen2JMSUp_;
  TBranch *NLGen2JMSUp_branch;
  bool     NLGen2JMSUp_isLoaded;
  int      NLGen3JMSUp_;
  TBranch *NLGen3JMSUp_branch;
  bool     NLGen3JMSUp_isLoaded;
  int      NLGen4JMSUp_;
  TBranch *NLGen4JMSUp_branch;
  bool     NLGen4JMSUp_isLoaded;
  int      NiFJJMSUp_;
  TBranch *NiFJJMSUp_branch;
  bool     NiFJJMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JMSUp_;
  TBranch *iFJ0JMSUp_branch;
  bool     iFJ0JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JMSUp_;
  TBranch *iFJ1JMSUp_branch;
  bool     iFJ1JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JMSUp_;
  TBranch *iFJ2JMSUp_branch;
  bool     iFJ2JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JMSUp_;
  TBranch *iFJ3JMSUp_branch;
  bool     iFJ3JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JMSUp_;
  TBranch *iFJ4JMSUp_branch;
  bool     iFJ4JMSUp_isLoaded;
  float    iVMD0JMSUp_;
  TBranch *iVMD0JMSUp_branch;
  bool     iVMD0JMSUp_isLoaded;
  float    iVMD1JMSUp_;
  TBranch *iVMD1JMSUp_branch;
  bool     iVMD1JMSUp_isLoaded;
  float    iVMD2JMSUp_;
  TBranch *iVMD2JMSUp_branch;
  bool     iVMD2JMSUp_isLoaded;
  float    iVMD3JMSUp_;
  TBranch *iVMD3JMSUp_branch;
  bool     iVMD3JMSUp_isLoaded;
  float    iVMD4JMSUp_;
  TBranch *iVMD4JMSUp_branch;
  bool     iVMD4JMSUp_isLoaded;
  float    iWMD0JMSUp_;
  TBranch *iWMD0JMSUp_branch;
  bool     iWMD0JMSUp_isLoaded;
  float    iWMD1JMSUp_;
  TBranch *iWMD1JMSUp_branch;
  bool     iWMD1JMSUp_isLoaded;
  float    iWMD2JMSUp_;
  TBranch *iWMD2JMSUp_branch;
  bool     iWMD2JMSUp_isLoaded;
  float    iWMD3JMSUp_;
  TBranch *iWMD3JMSUp_branch;
  bool     iWMD3JMSUp_isLoaded;
  float    iWMD4JMSUp_;
  TBranch *iWMD4JMSUp_branch;
  bool     iWMD4JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJMSUp_;
  TBranch *METJMSUp_branch;
  bool     METJMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJMSUp_;
  TBranch *NuJMSUp_branch;
  bool     NuJMSUp_isLoaded;
  int      NJJMSUp_;
  TBranch *NJJMSUp_branch;
  bool     NJJMSUp_isLoaded;
  int      NbLooseJMSUp_;
  TBranch *NbLooseJMSUp_branch;
  bool     NbLooseJMSUp_isLoaded;
  int      NbMediumJMSUp_;
  TBranch *NbMediumJMSUp_branch;
  bool     NbMediumJMSUp_isLoaded;
  int      NbTightJMSUp_;
  TBranch *NbTightJMSUp_branch;
  bool     NbTightJMSUp_isLoaded;
  int      NoORNbLooseJMSUp_;
  TBranch *NoORNbLooseJMSUp_branch;
  bool     NoORNbLooseJMSUp_isLoaded;
  int      NoORNbMediumJMSUp_;
  TBranch *NoORNbMediumJMSUp_branch;
  bool     NoORNbMediumJMSUp_isLoaded;
  int      NoORNbTightJMSUp_;
  TBranch *NoORNbTightJMSUp_branch;
  bool     NoORNbTightJMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JMSUp_;
  TBranch *J0JMSUp_branch;
  bool     J0JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JMSUp_;
  TBranch *J1JMSUp_branch;
  bool     J1JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JMSUp_;
  TBranch *J2JMSUp_branch;
  bool     J2JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JMSUp_;
  TBranch *J3JMSUp_branch;
  bool     J3JMSUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JMSUp_;
  TBranch *J4JMSUp_branch;
  bool     J4JMSUp_isLoaded;
  float    MVVXJMSUp_;
  TBranch *MVVXJMSUp_branch;
  bool     MVVXJMSUp_isLoaded;
  float    PtVVXJMSUp_;
  TBranch *PtVVXJMSUp_branch;
  bool     PtVVXJMSUp_isLoaded;
  float    HTJMSUp_;
  TBranch *HTJMSUp_branch;
  bool     HTJMSUp_isLoaded;
  float    HTJJMSUp_;
  TBranch *HTJJMSUp_branch;
  bool     HTJJMSUp_isLoaded;
  float    HTFJJMSUp_;
  TBranch *HTFJJMSUp_branch;
  bool     HTFJJMSUp_isLoaded;
  float    SumPtFJJMSUp_;
  TBranch *SumPtFJJMSUp_branch;
  bool     SumPtFJJMSUp_isLoaded;
  float    SumPtJJMSUp_;
  TBranch *SumPtJJMSUp_branch;
  bool     SumPtJJMSUp_isLoaded;
  int      NFJJMSDn_;
  TBranch *NFJJMSDn_branch;
  bool     NFJJMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JMSDn_;
  TBranch *FJ0JMSDn_branch;
  bool     FJ0JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JMSDn_;
  TBranch *FJ1JMSDn_branch;
  bool     FJ1JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JMSDn_;
  TBranch *FJ2JMSDn_branch;
  bool     FJ2JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JMSDn_;
  TBranch *FJ3JMSDn_branch;
  bool     FJ3JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JMSDn_;
  TBranch *FJ4JMSDn_branch;
  bool     FJ4JMSDn_isLoaded;
  float    VMD0JMSDn_;
  TBranch *VMD0JMSDn_branch;
  bool     VMD0JMSDn_isLoaded;
  float    VMD1JMSDn_;
  TBranch *VMD1JMSDn_branch;
  bool     VMD1JMSDn_isLoaded;
  float    VMD2JMSDn_;
  TBranch *VMD2JMSDn_branch;
  bool     VMD2JMSDn_isLoaded;
  float    VMD3JMSDn_;
  TBranch *VMD3JMSDn_branch;
  bool     VMD3JMSDn_isLoaded;
  float    VMD4JMSDn_;
  TBranch *VMD4JMSDn_branch;
  bool     VMD4JMSDn_isLoaded;
  float    WMD0JMSDn_;
  TBranch *WMD0JMSDn_branch;
  bool     WMD0JMSDn_isLoaded;
  float    WMD1JMSDn_;
  TBranch *WMD1JMSDn_branch;
  bool     WMD1JMSDn_isLoaded;
  float    WMD2JMSDn_;
  TBranch *WMD2JMSDn_branch;
  bool     WMD2JMSDn_isLoaded;
  float    WMD3JMSDn_;
  TBranch *WMD3JMSDn_branch;
  bool     WMD3JMSDn_isLoaded;
  float    WMD4JMSDn_;
  TBranch *WMD4JMSDn_branch;
  bool     WMD4JMSDn_isLoaded;
  int      NQGen0JMSDn_;
  TBranch *NQGen0JMSDn_branch;
  bool     NQGen0JMSDn_isLoaded;
  int      NQGen1JMSDn_;
  TBranch *NQGen1JMSDn_branch;
  bool     NQGen1JMSDn_isLoaded;
  int      NQGen2JMSDn_;
  TBranch *NQGen2JMSDn_branch;
  bool     NQGen2JMSDn_isLoaded;
  int      NQGen3JMSDn_;
  TBranch *NQGen3JMSDn_branch;
  bool     NQGen3JMSDn_isLoaded;
  int      NQGen4JMSDn_;
  TBranch *NQGen4JMSDn_branch;
  bool     NQGen4JMSDn_isLoaded;
  int      NBGen0JMSDn_;
  TBranch *NBGen0JMSDn_branch;
  bool     NBGen0JMSDn_isLoaded;
  int      NBGen1JMSDn_;
  TBranch *NBGen1JMSDn_branch;
  bool     NBGen1JMSDn_isLoaded;
  int      NBGen2JMSDn_;
  TBranch *NBGen2JMSDn_branch;
  bool     NBGen2JMSDn_isLoaded;
  int      NBGen3JMSDn_;
  TBranch *NBGen3JMSDn_branch;
  bool     NBGen3JMSDn_isLoaded;
  int      NBGen4JMSDn_;
  TBranch *NBGen4JMSDn_branch;
  bool     NBGen4JMSDn_isLoaded;
  int      NLGen0JMSDn_;
  TBranch *NLGen0JMSDn_branch;
  bool     NLGen0JMSDn_isLoaded;
  int      NLGen1JMSDn_;
  TBranch *NLGen1JMSDn_branch;
  bool     NLGen1JMSDn_isLoaded;
  int      NLGen2JMSDn_;
  TBranch *NLGen2JMSDn_branch;
  bool     NLGen2JMSDn_isLoaded;
  int      NLGen3JMSDn_;
  TBranch *NLGen3JMSDn_branch;
  bool     NLGen3JMSDn_isLoaded;
  int      NLGen4JMSDn_;
  TBranch *NLGen4JMSDn_branch;
  bool     NLGen4JMSDn_isLoaded;
  int      NiFJJMSDn_;
  TBranch *NiFJJMSDn_branch;
  bool     NiFJJMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JMSDn_;
  TBranch *iFJ0JMSDn_branch;
  bool     iFJ0JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JMSDn_;
  TBranch *iFJ1JMSDn_branch;
  bool     iFJ1JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JMSDn_;
  TBranch *iFJ2JMSDn_branch;
  bool     iFJ2JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JMSDn_;
  TBranch *iFJ3JMSDn_branch;
  bool     iFJ3JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JMSDn_;
  TBranch *iFJ4JMSDn_branch;
  bool     iFJ4JMSDn_isLoaded;
  float    iVMD0JMSDn_;
  TBranch *iVMD0JMSDn_branch;
  bool     iVMD0JMSDn_isLoaded;
  float    iVMD1JMSDn_;
  TBranch *iVMD1JMSDn_branch;
  bool     iVMD1JMSDn_isLoaded;
  float    iVMD2JMSDn_;
  TBranch *iVMD2JMSDn_branch;
  bool     iVMD2JMSDn_isLoaded;
  float    iVMD3JMSDn_;
  TBranch *iVMD3JMSDn_branch;
  bool     iVMD3JMSDn_isLoaded;
  float    iVMD4JMSDn_;
  TBranch *iVMD4JMSDn_branch;
  bool     iVMD4JMSDn_isLoaded;
  float    iWMD0JMSDn_;
  TBranch *iWMD0JMSDn_branch;
  bool     iWMD0JMSDn_isLoaded;
  float    iWMD1JMSDn_;
  TBranch *iWMD1JMSDn_branch;
  bool     iWMD1JMSDn_isLoaded;
  float    iWMD2JMSDn_;
  TBranch *iWMD2JMSDn_branch;
  bool     iWMD2JMSDn_isLoaded;
  float    iWMD3JMSDn_;
  TBranch *iWMD3JMSDn_branch;
  bool     iWMD3JMSDn_isLoaded;
  float    iWMD4JMSDn_;
  TBranch *iWMD4JMSDn_branch;
  bool     iWMD4JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJMSDn_;
  TBranch *METJMSDn_branch;
  bool     METJMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJMSDn_;
  TBranch *NuJMSDn_branch;
  bool     NuJMSDn_isLoaded;
  int      NJJMSDn_;
  TBranch *NJJMSDn_branch;
  bool     NJJMSDn_isLoaded;
  int      NbLooseJMSDn_;
  TBranch *NbLooseJMSDn_branch;
  bool     NbLooseJMSDn_isLoaded;
  int      NbMediumJMSDn_;
  TBranch *NbMediumJMSDn_branch;
  bool     NbMediumJMSDn_isLoaded;
  int      NbTightJMSDn_;
  TBranch *NbTightJMSDn_branch;
  bool     NbTightJMSDn_isLoaded;
  int      NoORNbLooseJMSDn_;
  TBranch *NoORNbLooseJMSDn_branch;
  bool     NoORNbLooseJMSDn_isLoaded;
  int      NoORNbMediumJMSDn_;
  TBranch *NoORNbMediumJMSDn_branch;
  bool     NoORNbMediumJMSDn_isLoaded;
  int      NoORNbTightJMSDn_;
  TBranch *NoORNbTightJMSDn_branch;
  bool     NoORNbTightJMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JMSDn_;
  TBranch *J0JMSDn_branch;
  bool     J0JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JMSDn_;
  TBranch *J1JMSDn_branch;
  bool     J1JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JMSDn_;
  TBranch *J2JMSDn_branch;
  bool     J2JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JMSDn_;
  TBranch *J3JMSDn_branch;
  bool     J3JMSDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JMSDn_;
  TBranch *J4JMSDn_branch;
  bool     J4JMSDn_isLoaded;
  float    MVVXJMSDn_;
  TBranch *MVVXJMSDn_branch;
  bool     MVVXJMSDn_isLoaded;
  float    PtVVXJMSDn_;
  TBranch *PtVVXJMSDn_branch;
  bool     PtVVXJMSDn_isLoaded;
  float    HTJMSDn_;
  TBranch *HTJMSDn_branch;
  bool     HTJMSDn_isLoaded;
  float    HTJJMSDn_;
  TBranch *HTJJMSDn_branch;
  bool     HTJJMSDn_isLoaded;
  float    HTFJJMSDn_;
  TBranch *HTFJJMSDn_branch;
  bool     HTFJJMSDn_isLoaded;
  float    SumPtFJJMSDn_;
  TBranch *SumPtFJJMSDn_branch;
  bool     SumPtFJJMSDn_isLoaded;
  float    SumPtJJMSDn_;
  TBranch *SumPtJJMSDn_branch;
  bool     SumPtJJMSDn_isLoaded;
  int      NFJJMRUp_;
  TBranch *NFJJMRUp_branch;
  bool     NFJJMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JMRUp_;
  TBranch *FJ0JMRUp_branch;
  bool     FJ0JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JMRUp_;
  TBranch *FJ1JMRUp_branch;
  bool     FJ1JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JMRUp_;
  TBranch *FJ2JMRUp_branch;
  bool     FJ2JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JMRUp_;
  TBranch *FJ3JMRUp_branch;
  bool     FJ3JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JMRUp_;
  TBranch *FJ4JMRUp_branch;
  bool     FJ4JMRUp_isLoaded;
  float    VMD0JMRUp_;
  TBranch *VMD0JMRUp_branch;
  bool     VMD0JMRUp_isLoaded;
  float    VMD1JMRUp_;
  TBranch *VMD1JMRUp_branch;
  bool     VMD1JMRUp_isLoaded;
  float    VMD2JMRUp_;
  TBranch *VMD2JMRUp_branch;
  bool     VMD2JMRUp_isLoaded;
  float    VMD3JMRUp_;
  TBranch *VMD3JMRUp_branch;
  bool     VMD3JMRUp_isLoaded;
  float    VMD4JMRUp_;
  TBranch *VMD4JMRUp_branch;
  bool     VMD4JMRUp_isLoaded;
  float    WMD0JMRUp_;
  TBranch *WMD0JMRUp_branch;
  bool     WMD0JMRUp_isLoaded;
  float    WMD1JMRUp_;
  TBranch *WMD1JMRUp_branch;
  bool     WMD1JMRUp_isLoaded;
  float    WMD2JMRUp_;
  TBranch *WMD2JMRUp_branch;
  bool     WMD2JMRUp_isLoaded;
  float    WMD3JMRUp_;
  TBranch *WMD3JMRUp_branch;
  bool     WMD3JMRUp_isLoaded;
  float    WMD4JMRUp_;
  TBranch *WMD4JMRUp_branch;
  bool     WMD4JMRUp_isLoaded;
  int      NQGen0JMRUp_;
  TBranch *NQGen0JMRUp_branch;
  bool     NQGen0JMRUp_isLoaded;
  int      NQGen1JMRUp_;
  TBranch *NQGen1JMRUp_branch;
  bool     NQGen1JMRUp_isLoaded;
  int      NQGen2JMRUp_;
  TBranch *NQGen2JMRUp_branch;
  bool     NQGen2JMRUp_isLoaded;
  int      NQGen3JMRUp_;
  TBranch *NQGen3JMRUp_branch;
  bool     NQGen3JMRUp_isLoaded;
  int      NQGen4JMRUp_;
  TBranch *NQGen4JMRUp_branch;
  bool     NQGen4JMRUp_isLoaded;
  int      NBGen0JMRUp_;
  TBranch *NBGen0JMRUp_branch;
  bool     NBGen0JMRUp_isLoaded;
  int      NBGen1JMRUp_;
  TBranch *NBGen1JMRUp_branch;
  bool     NBGen1JMRUp_isLoaded;
  int      NBGen2JMRUp_;
  TBranch *NBGen2JMRUp_branch;
  bool     NBGen2JMRUp_isLoaded;
  int      NBGen3JMRUp_;
  TBranch *NBGen3JMRUp_branch;
  bool     NBGen3JMRUp_isLoaded;
  int      NBGen4JMRUp_;
  TBranch *NBGen4JMRUp_branch;
  bool     NBGen4JMRUp_isLoaded;
  int      NLGen0JMRUp_;
  TBranch *NLGen0JMRUp_branch;
  bool     NLGen0JMRUp_isLoaded;
  int      NLGen1JMRUp_;
  TBranch *NLGen1JMRUp_branch;
  bool     NLGen1JMRUp_isLoaded;
  int      NLGen2JMRUp_;
  TBranch *NLGen2JMRUp_branch;
  bool     NLGen2JMRUp_isLoaded;
  int      NLGen3JMRUp_;
  TBranch *NLGen3JMRUp_branch;
  bool     NLGen3JMRUp_isLoaded;
  int      NLGen4JMRUp_;
  TBranch *NLGen4JMRUp_branch;
  bool     NLGen4JMRUp_isLoaded;
  int      NiFJJMRUp_;
  TBranch *NiFJJMRUp_branch;
  bool     NiFJJMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JMRUp_;
  TBranch *iFJ0JMRUp_branch;
  bool     iFJ0JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JMRUp_;
  TBranch *iFJ1JMRUp_branch;
  bool     iFJ1JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JMRUp_;
  TBranch *iFJ2JMRUp_branch;
  bool     iFJ2JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JMRUp_;
  TBranch *iFJ3JMRUp_branch;
  bool     iFJ3JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JMRUp_;
  TBranch *iFJ4JMRUp_branch;
  bool     iFJ4JMRUp_isLoaded;
  float    iVMD0JMRUp_;
  TBranch *iVMD0JMRUp_branch;
  bool     iVMD0JMRUp_isLoaded;
  float    iVMD1JMRUp_;
  TBranch *iVMD1JMRUp_branch;
  bool     iVMD1JMRUp_isLoaded;
  float    iVMD2JMRUp_;
  TBranch *iVMD2JMRUp_branch;
  bool     iVMD2JMRUp_isLoaded;
  float    iVMD3JMRUp_;
  TBranch *iVMD3JMRUp_branch;
  bool     iVMD3JMRUp_isLoaded;
  float    iVMD4JMRUp_;
  TBranch *iVMD4JMRUp_branch;
  bool     iVMD4JMRUp_isLoaded;
  float    iWMD0JMRUp_;
  TBranch *iWMD0JMRUp_branch;
  bool     iWMD0JMRUp_isLoaded;
  float    iWMD1JMRUp_;
  TBranch *iWMD1JMRUp_branch;
  bool     iWMD1JMRUp_isLoaded;
  float    iWMD2JMRUp_;
  TBranch *iWMD2JMRUp_branch;
  bool     iWMD2JMRUp_isLoaded;
  float    iWMD3JMRUp_;
  TBranch *iWMD3JMRUp_branch;
  bool     iWMD3JMRUp_isLoaded;
  float    iWMD4JMRUp_;
  TBranch *iWMD4JMRUp_branch;
  bool     iWMD4JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJMRUp_;
  TBranch *METJMRUp_branch;
  bool     METJMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJMRUp_;
  TBranch *NuJMRUp_branch;
  bool     NuJMRUp_isLoaded;
  int      NJJMRUp_;
  TBranch *NJJMRUp_branch;
  bool     NJJMRUp_isLoaded;
  int      NbLooseJMRUp_;
  TBranch *NbLooseJMRUp_branch;
  bool     NbLooseJMRUp_isLoaded;
  int      NbMediumJMRUp_;
  TBranch *NbMediumJMRUp_branch;
  bool     NbMediumJMRUp_isLoaded;
  int      NbTightJMRUp_;
  TBranch *NbTightJMRUp_branch;
  bool     NbTightJMRUp_isLoaded;
  int      NoORNbLooseJMRUp_;
  TBranch *NoORNbLooseJMRUp_branch;
  bool     NoORNbLooseJMRUp_isLoaded;
  int      NoORNbMediumJMRUp_;
  TBranch *NoORNbMediumJMRUp_branch;
  bool     NoORNbMediumJMRUp_isLoaded;
  int      NoORNbTightJMRUp_;
  TBranch *NoORNbTightJMRUp_branch;
  bool     NoORNbTightJMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JMRUp_;
  TBranch *J0JMRUp_branch;
  bool     J0JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JMRUp_;
  TBranch *J1JMRUp_branch;
  bool     J1JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JMRUp_;
  TBranch *J2JMRUp_branch;
  bool     J2JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JMRUp_;
  TBranch *J3JMRUp_branch;
  bool     J3JMRUp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JMRUp_;
  TBranch *J4JMRUp_branch;
  bool     J4JMRUp_isLoaded;
  float    MVVXJMRUp_;
  TBranch *MVVXJMRUp_branch;
  bool     MVVXJMRUp_isLoaded;
  float    PtVVXJMRUp_;
  TBranch *PtVVXJMRUp_branch;
  bool     PtVVXJMRUp_isLoaded;
  float    HTJMRUp_;
  TBranch *HTJMRUp_branch;
  bool     HTJMRUp_isLoaded;
  float    HTJJMRUp_;
  TBranch *HTJJMRUp_branch;
  bool     HTJJMRUp_isLoaded;
  float    HTFJJMRUp_;
  TBranch *HTFJJMRUp_branch;
  bool     HTFJJMRUp_isLoaded;
  float    SumPtFJJMRUp_;
  TBranch *SumPtFJJMRUp_branch;
  bool     SumPtFJJMRUp_isLoaded;
  float    SumPtJJMRUp_;
  TBranch *SumPtJJMRUp_branch;
  bool     SumPtJJMRUp_isLoaded;
  int      NFJJMRDn_;
  TBranch *NFJJMRDn_branch;
  bool     NFJJMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ0JMRDn_;
  TBranch *FJ0JMRDn_branch;
  bool     FJ0JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ1JMRDn_;
  TBranch *FJ1JMRDn_branch;
  bool     FJ1JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ2JMRDn_;
  TBranch *FJ2JMRDn_branch;
  bool     FJ2JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ3JMRDn_;
  TBranch *FJ3JMRDn_branch;
  bool     FJ3JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *FJ4JMRDn_;
  TBranch *FJ4JMRDn_branch;
  bool     FJ4JMRDn_isLoaded;
  float    VMD0JMRDn_;
  TBranch *VMD0JMRDn_branch;
  bool     VMD0JMRDn_isLoaded;
  float    VMD1JMRDn_;
  TBranch *VMD1JMRDn_branch;
  bool     VMD1JMRDn_isLoaded;
  float    VMD2JMRDn_;
  TBranch *VMD2JMRDn_branch;
  bool     VMD2JMRDn_isLoaded;
  float    VMD3JMRDn_;
  TBranch *VMD3JMRDn_branch;
  bool     VMD3JMRDn_isLoaded;
  float    VMD4JMRDn_;
  TBranch *VMD4JMRDn_branch;
  bool     VMD4JMRDn_isLoaded;
  float    WMD0JMRDn_;
  TBranch *WMD0JMRDn_branch;
  bool     WMD0JMRDn_isLoaded;
  float    WMD1JMRDn_;
  TBranch *WMD1JMRDn_branch;
  bool     WMD1JMRDn_isLoaded;
  float    WMD2JMRDn_;
  TBranch *WMD2JMRDn_branch;
  bool     WMD2JMRDn_isLoaded;
  float    WMD3JMRDn_;
  TBranch *WMD3JMRDn_branch;
  bool     WMD3JMRDn_isLoaded;
  float    WMD4JMRDn_;
  TBranch *WMD4JMRDn_branch;
  bool     WMD4JMRDn_isLoaded;
  int      NQGen0JMRDn_;
  TBranch *NQGen0JMRDn_branch;
  bool     NQGen0JMRDn_isLoaded;
  int      NQGen1JMRDn_;
  TBranch *NQGen1JMRDn_branch;
  bool     NQGen1JMRDn_isLoaded;
  int      NQGen2JMRDn_;
  TBranch *NQGen2JMRDn_branch;
  bool     NQGen2JMRDn_isLoaded;
  int      NQGen3JMRDn_;
  TBranch *NQGen3JMRDn_branch;
  bool     NQGen3JMRDn_isLoaded;
  int      NQGen4JMRDn_;
  TBranch *NQGen4JMRDn_branch;
  bool     NQGen4JMRDn_isLoaded;
  int      NBGen0JMRDn_;
  TBranch *NBGen0JMRDn_branch;
  bool     NBGen0JMRDn_isLoaded;
  int      NBGen1JMRDn_;
  TBranch *NBGen1JMRDn_branch;
  bool     NBGen1JMRDn_isLoaded;
  int      NBGen2JMRDn_;
  TBranch *NBGen2JMRDn_branch;
  bool     NBGen2JMRDn_isLoaded;
  int      NBGen3JMRDn_;
  TBranch *NBGen3JMRDn_branch;
  bool     NBGen3JMRDn_isLoaded;
  int      NBGen4JMRDn_;
  TBranch *NBGen4JMRDn_branch;
  bool     NBGen4JMRDn_isLoaded;
  int      NLGen0JMRDn_;
  TBranch *NLGen0JMRDn_branch;
  bool     NLGen0JMRDn_isLoaded;
  int      NLGen1JMRDn_;
  TBranch *NLGen1JMRDn_branch;
  bool     NLGen1JMRDn_isLoaded;
  int      NLGen2JMRDn_;
  TBranch *NLGen2JMRDn_branch;
  bool     NLGen2JMRDn_isLoaded;
  int      NLGen3JMRDn_;
  TBranch *NLGen3JMRDn_branch;
  bool     NLGen3JMRDn_isLoaded;
  int      NLGen4JMRDn_;
  TBranch *NLGen4JMRDn_branch;
  bool     NLGen4JMRDn_isLoaded;
  int      NiFJJMRDn_;
  TBranch *NiFJJMRDn_branch;
  bool     NiFJJMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ0JMRDn_;
  TBranch *iFJ0JMRDn_branch;
  bool     iFJ0JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ1JMRDn_;
  TBranch *iFJ1JMRDn_branch;
  bool     iFJ1JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ2JMRDn_;
  TBranch *iFJ2JMRDn_branch;
  bool     iFJ2JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ3JMRDn_;
  TBranch *iFJ3JMRDn_branch;
  bool     iFJ3JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *iFJ4JMRDn_;
  TBranch *iFJ4JMRDn_branch;
  bool     iFJ4JMRDn_isLoaded;
  float    iVMD0JMRDn_;
  TBranch *iVMD0JMRDn_branch;
  bool     iVMD0JMRDn_isLoaded;
  float    iVMD1JMRDn_;
  TBranch *iVMD1JMRDn_branch;
  bool     iVMD1JMRDn_isLoaded;
  float    iVMD2JMRDn_;
  TBranch *iVMD2JMRDn_branch;
  bool     iVMD2JMRDn_isLoaded;
  float    iVMD3JMRDn_;
  TBranch *iVMD3JMRDn_branch;
  bool     iVMD3JMRDn_isLoaded;
  float    iVMD4JMRDn_;
  TBranch *iVMD4JMRDn_branch;
  bool     iVMD4JMRDn_isLoaded;
  float    iWMD0JMRDn_;
  TBranch *iWMD0JMRDn_branch;
  bool     iWMD0JMRDn_isLoaded;
  float    iWMD1JMRDn_;
  TBranch *iWMD1JMRDn_branch;
  bool     iWMD1JMRDn_isLoaded;
  float    iWMD2JMRDn_;
  TBranch *iWMD2JMRDn_branch;
  bool     iWMD2JMRDn_isLoaded;
  float    iWMD3JMRDn_;
  TBranch *iWMD3JMRDn_branch;
  bool     iWMD3JMRDn_isLoaded;
  float    iWMD4JMRDn_;
  TBranch *iWMD4JMRDn_branch;
  bool     iWMD4JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *METJMRDn_;
  TBranch *METJMRDn_branch;
  bool     METJMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *NuJMRDn_;
  TBranch *NuJMRDn_branch;
  bool     NuJMRDn_isLoaded;
  int      NJJMRDn_;
  TBranch *NJJMRDn_branch;
  bool     NJJMRDn_isLoaded;
  int      NbLooseJMRDn_;
  TBranch *NbLooseJMRDn_branch;
  bool     NbLooseJMRDn_isLoaded;
  int      NbMediumJMRDn_;
  TBranch *NbMediumJMRDn_branch;
  bool     NbMediumJMRDn_isLoaded;
  int      NbTightJMRDn_;
  TBranch *NbTightJMRDn_branch;
  bool     NbTightJMRDn_isLoaded;
  int      NoORNbLooseJMRDn_;
  TBranch *NoORNbLooseJMRDn_branch;
  bool     NoORNbLooseJMRDn_isLoaded;
  int      NoORNbMediumJMRDn_;
  TBranch *NoORNbMediumJMRDn_branch;
  bool     NoORNbMediumJMRDn_isLoaded;
  int      NoORNbTightJMRDn_;
  TBranch *NoORNbTightJMRDn_branch;
  bool     NoORNbTightJMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J0JMRDn_;
  TBranch *J0JMRDn_branch;
  bool     J0JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J1JMRDn_;
  TBranch *J1JMRDn_branch;
  bool     J1JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J2JMRDn_;
  TBranch *J2JMRDn_branch;
  bool     J2JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J3JMRDn_;
  TBranch *J3JMRDn_branch;
  bool     J3JMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *J4JMRDn_;
  TBranch *J4JMRDn_branch;
  bool     J4JMRDn_isLoaded;
  float    MVVXJMRDn_;
  TBranch *MVVXJMRDn_branch;
  bool     MVVXJMRDn_isLoaded;
  float    PtVVXJMRDn_;
  TBranch *PtVVXJMRDn_branch;
  bool     PtVVXJMRDn_isLoaded;
  float    HTJMRDn_;
  TBranch *HTJMRDn_branch;
  bool     HTJMRDn_isLoaded;
  float    HTJJMRDn_;
  TBranch *HTJJMRDn_branch;
  bool     HTJJMRDn_isLoaded;
  float    HTFJJMRDn_;
  TBranch *HTFJJMRDn_branch;
  bool     HTFJJMRDn_isLoaded;
  float    SumPtFJJMRDn_;
  TBranch *SumPtFJJMRDn_branch;
  bool     SumPtFJJMRDn_isLoaded;
  float    SumPtJJMRDn_;
  TBranch *SumPtJJMRDn_branch;
  bool     SumPtJJMRDn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenV0_;
  TBranch *GenV0_branch;
  bool     GenV0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenV1_;
  TBranch *GenV1_branch;
  bool     GenV1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenV2_;
  TBranch *GenV2_branch;
  bool     GenV2_isLoaded;
  int      isHad0_;
  TBranch *isHad0_branch;
  bool     isHad0_isLoaded;
  int      isHad1_;
  TBranch *isHad1_branch;
  bool     isHad1_isLoaded;
  int      isHad2_;
  TBranch *isHad2_branch;
  bool     isHad2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF00_;
  TBranch *GenF00_branch;
  bool     GenF00_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF01_;
  TBranch *GenF01_branch;
  bool     GenF01_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF10_;
  TBranch *GenF10_branch;
  bool     GenF10_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF11_;
  TBranch *GenF11_branch;
  bool     GenF11_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF20_;
  TBranch *GenF20_branch;
  bool     GenF20_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *GenF21_;
  TBranch *GenF21_branch;
  bool     GenF21_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &isData();
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &year();
  const float &genWeight();
  const float &wgt();
  const vector<float> &LHEReweightingWeight();
  const float &prefireWgt();
  const float &prefireWgtUp();
  const float &prefireWgtDn();
  const float &puWgt();
  const float &puWgtUp();
  const float &puWgtDn();
  const float &trigWgt();
  const float &trigWgtUp();
  const float &trigWgtDn();
  const int &trigger();
  const int &is0Lep();
  const int &is1Lep();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &Lep();
  const int &LepFlav();
  const int &NFJ();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4();
  const float &VMD0();
  const float &VMD1();
  const float &VMD2();
  const float &VMD3();
  const float &VMD4();
  const float &WMD0();
  const float &WMD1();
  const float &WMD2();
  const float &WMD3();
  const float &WMD4();
  const int &NQGen0();
  const int &NQGen1();
  const int &NQGen2();
  const int &NQGen3();
  const int &NQGen4();
  const int &NBGen0();
  const int &NBGen1();
  const int &NBGen2();
  const int &NBGen3();
  const int &NBGen4();
  const int &NLGen0();
  const int &NLGen1();
  const int &NLGen2();
  const int &NLGen3();
  const int &NLGen4();
  const int &NiFJ();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4();
  const float &iVMD0();
  const float &iVMD1();
  const float &iVMD2();
  const float &iVMD3();
  const float &iVMD4();
  const float &iWMD0();
  const float &iWMD1();
  const float &iWMD2();
  const float &iWMD3();
  const float &iWMD4();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &MET();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &Nu();
  const int &NJ();
  const int &NbLoose();
  const int &NbMedium();
  const int &NbTight();
  const int &NoORNbLoose();
  const int &NoORNbMedium();
  const int &NoORNbTight();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4();
  const float &MVVX();
  const float &PtVVX();
  const float &HT();
  const float &HTJ();
  const float &HTFJ();
  const float &SumPtFJ();
  const float &SumPtJ();
  const int &NFJJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JESUp();
  const float &VMD0JESUp();
  const float &VMD1JESUp();
  const float &VMD2JESUp();
  const float &VMD3JESUp();
  const float &VMD4JESUp();
  const float &WMD0JESUp();
  const float &WMD1JESUp();
  const float &WMD2JESUp();
  const float &WMD3JESUp();
  const float &WMD4JESUp();
  const int &NQGen0JESUp();
  const int &NQGen1JESUp();
  const int &NQGen2JESUp();
  const int &NQGen3JESUp();
  const int &NQGen4JESUp();
  const int &NBGen0JESUp();
  const int &NBGen1JESUp();
  const int &NBGen2JESUp();
  const int &NBGen3JESUp();
  const int &NBGen4JESUp();
  const int &NLGen0JESUp();
  const int &NLGen1JESUp();
  const int &NLGen2JESUp();
  const int &NLGen3JESUp();
  const int &NLGen4JESUp();
  const int &NiFJJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JESUp();
  const float &iVMD0JESUp();
  const float &iVMD1JESUp();
  const float &iVMD2JESUp();
  const float &iVMD3JESUp();
  const float &iVMD4JESUp();
  const float &iWMD0JESUp();
  const float &iWMD1JESUp();
  const float &iWMD2JESUp();
  const float &iWMD3JESUp();
  const float &iWMD4JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJESUp();
  const int &NJJESUp();
  const int &NbLooseJESUp();
  const int &NbMediumJESUp();
  const int &NbTightJESUp();
  const int &NoORNbLooseJESUp();
  const int &NoORNbMediumJESUp();
  const int &NoORNbTightJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JESUp();
  const float &MVVXJESUp();
  const float &PtVVXJESUp();
  const float &HTJESUp();
  const float &HTJJESUp();
  const float &HTFJJESUp();
  const float &SumPtFJJESUp();
  const float &SumPtJJESUp();
  const int &NFJJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JESDn();
  const float &VMD0JESDn();
  const float &VMD1JESDn();
  const float &VMD2JESDn();
  const float &VMD3JESDn();
  const float &VMD4JESDn();
  const float &WMD0JESDn();
  const float &WMD1JESDn();
  const float &WMD2JESDn();
  const float &WMD3JESDn();
  const float &WMD4JESDn();
  const int &NQGen0JESDn();
  const int &NQGen1JESDn();
  const int &NQGen2JESDn();
  const int &NQGen3JESDn();
  const int &NQGen4JESDn();
  const int &NBGen0JESDn();
  const int &NBGen1JESDn();
  const int &NBGen2JESDn();
  const int &NBGen3JESDn();
  const int &NBGen4JESDn();
  const int &NLGen0JESDn();
  const int &NLGen1JESDn();
  const int &NLGen2JESDn();
  const int &NLGen3JESDn();
  const int &NLGen4JESDn();
  const int &NiFJJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JESDn();
  const float &iVMD0JESDn();
  const float &iVMD1JESDn();
  const float &iVMD2JESDn();
  const float &iVMD3JESDn();
  const float &iVMD4JESDn();
  const float &iWMD0JESDn();
  const float &iWMD1JESDn();
  const float &iWMD2JESDn();
  const float &iWMD3JESDn();
  const float &iWMD4JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJESDn();
  const int &NJJESDn();
  const int &NbLooseJESDn();
  const int &NbMediumJESDn();
  const int &NbTightJESDn();
  const int &NoORNbLooseJESDn();
  const int &NoORNbMediumJESDn();
  const int &NoORNbTightJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JESDn();
  const float &MVVXJESDn();
  const float &PtVVXJESDn();
  const float &HTJESDn();
  const float &HTJJESDn();
  const float &HTFJJESDn();
  const float &SumPtFJJESDn();
  const float &SumPtJJESDn();
  const int &NFJJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JERUp();
  const float &VMD0JERUp();
  const float &VMD1JERUp();
  const float &VMD2JERUp();
  const float &VMD3JERUp();
  const float &VMD4JERUp();
  const float &WMD0JERUp();
  const float &WMD1JERUp();
  const float &WMD2JERUp();
  const float &WMD3JERUp();
  const float &WMD4JERUp();
  const int &NQGen0JERUp();
  const int &NQGen1JERUp();
  const int &NQGen2JERUp();
  const int &NQGen3JERUp();
  const int &NQGen4JERUp();
  const int &NBGen0JERUp();
  const int &NBGen1JERUp();
  const int &NBGen2JERUp();
  const int &NBGen3JERUp();
  const int &NBGen4JERUp();
  const int &NLGen0JERUp();
  const int &NLGen1JERUp();
  const int &NLGen2JERUp();
  const int &NLGen3JERUp();
  const int &NLGen4JERUp();
  const int &NiFJJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JERUp();
  const float &iVMD0JERUp();
  const float &iVMD1JERUp();
  const float &iVMD2JERUp();
  const float &iVMD3JERUp();
  const float &iVMD4JERUp();
  const float &iWMD0JERUp();
  const float &iWMD1JERUp();
  const float &iWMD2JERUp();
  const float &iWMD3JERUp();
  const float &iWMD4JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJERUp();
  const int &NJJERUp();
  const int &NbLooseJERUp();
  const int &NbMediumJERUp();
  const int &NbTightJERUp();
  const int &NoORNbLooseJERUp();
  const int &NoORNbMediumJERUp();
  const int &NoORNbTightJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JERUp();
  const float &MVVXJERUp();
  const float &PtVVXJERUp();
  const float &HTJERUp();
  const float &HTJJERUp();
  const float &HTFJJERUp();
  const float &SumPtFJJERUp();
  const float &SumPtJJERUp();
  const int &NFJJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JERDn();
  const float &VMD0JERDn();
  const float &VMD1JERDn();
  const float &VMD2JERDn();
  const float &VMD3JERDn();
  const float &VMD4JERDn();
  const float &WMD0JERDn();
  const float &WMD1JERDn();
  const float &WMD2JERDn();
  const float &WMD3JERDn();
  const float &WMD4JERDn();
  const int &NQGen0JERDn();
  const int &NQGen1JERDn();
  const int &NQGen2JERDn();
  const int &NQGen3JERDn();
  const int &NQGen4JERDn();
  const int &NBGen0JERDn();
  const int &NBGen1JERDn();
  const int &NBGen2JERDn();
  const int &NBGen3JERDn();
  const int &NBGen4JERDn();
  const int &NLGen0JERDn();
  const int &NLGen1JERDn();
  const int &NLGen2JERDn();
  const int &NLGen3JERDn();
  const int &NLGen4JERDn();
  const int &NiFJJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JERDn();
  const float &iVMD0JERDn();
  const float &iVMD1JERDn();
  const float &iVMD2JERDn();
  const float &iVMD3JERDn();
  const float &iVMD4JERDn();
  const float &iWMD0JERDn();
  const float &iWMD1JERDn();
  const float &iWMD2JERDn();
  const float &iWMD3JERDn();
  const float &iWMD4JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJERDn();
  const int &NJJERDn();
  const int &NbLooseJERDn();
  const int &NbMediumJERDn();
  const int &NbTightJERDn();
  const int &NoORNbLooseJERDn();
  const int &NoORNbMediumJERDn();
  const int &NoORNbTightJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JERDn();
  const float &MVVXJERDn();
  const float &PtVVXJERDn();
  const float &HTJERDn();
  const float &HTJJERDn();
  const float &HTFJJERDn();
  const float &SumPtFJJERDn();
  const float &SumPtJJERDn();
  const int &NFJJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMSUp();
  const float &VMD0JMSUp();
  const float &VMD1JMSUp();
  const float &VMD2JMSUp();
  const float &VMD3JMSUp();
  const float &VMD4JMSUp();
  const float &WMD0JMSUp();
  const float &WMD1JMSUp();
  const float &WMD2JMSUp();
  const float &WMD3JMSUp();
  const float &WMD4JMSUp();
  const int &NQGen0JMSUp();
  const int &NQGen1JMSUp();
  const int &NQGen2JMSUp();
  const int &NQGen3JMSUp();
  const int &NQGen4JMSUp();
  const int &NBGen0JMSUp();
  const int &NBGen1JMSUp();
  const int &NBGen2JMSUp();
  const int &NBGen3JMSUp();
  const int &NBGen4JMSUp();
  const int &NLGen0JMSUp();
  const int &NLGen1JMSUp();
  const int &NLGen2JMSUp();
  const int &NLGen3JMSUp();
  const int &NLGen4JMSUp();
  const int &NiFJJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMSUp();
  const float &iVMD0JMSUp();
  const float &iVMD1JMSUp();
  const float &iVMD2JMSUp();
  const float &iVMD3JMSUp();
  const float &iVMD4JMSUp();
  const float &iWMD0JMSUp();
  const float &iWMD1JMSUp();
  const float &iWMD2JMSUp();
  const float &iWMD3JMSUp();
  const float &iWMD4JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMSUp();
  const int &NJJMSUp();
  const int &NbLooseJMSUp();
  const int &NbMediumJMSUp();
  const int &NbTightJMSUp();
  const int &NoORNbLooseJMSUp();
  const int &NoORNbMediumJMSUp();
  const int &NoORNbTightJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMSUp();
  const float &MVVXJMSUp();
  const float &PtVVXJMSUp();
  const float &HTJMSUp();
  const float &HTJJMSUp();
  const float &HTFJJMSUp();
  const float &SumPtFJJMSUp();
  const float &SumPtJJMSUp();
  const int &NFJJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMSDn();
  const float &VMD0JMSDn();
  const float &VMD1JMSDn();
  const float &VMD2JMSDn();
  const float &VMD3JMSDn();
  const float &VMD4JMSDn();
  const float &WMD0JMSDn();
  const float &WMD1JMSDn();
  const float &WMD2JMSDn();
  const float &WMD3JMSDn();
  const float &WMD4JMSDn();
  const int &NQGen0JMSDn();
  const int &NQGen1JMSDn();
  const int &NQGen2JMSDn();
  const int &NQGen3JMSDn();
  const int &NQGen4JMSDn();
  const int &NBGen0JMSDn();
  const int &NBGen1JMSDn();
  const int &NBGen2JMSDn();
  const int &NBGen3JMSDn();
  const int &NBGen4JMSDn();
  const int &NLGen0JMSDn();
  const int &NLGen1JMSDn();
  const int &NLGen2JMSDn();
  const int &NLGen3JMSDn();
  const int &NLGen4JMSDn();
  const int &NiFJJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMSDn();
  const float &iVMD0JMSDn();
  const float &iVMD1JMSDn();
  const float &iVMD2JMSDn();
  const float &iVMD3JMSDn();
  const float &iVMD4JMSDn();
  const float &iWMD0JMSDn();
  const float &iWMD1JMSDn();
  const float &iWMD2JMSDn();
  const float &iWMD3JMSDn();
  const float &iWMD4JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMSDn();
  const int &NJJMSDn();
  const int &NbLooseJMSDn();
  const int &NbMediumJMSDn();
  const int &NbTightJMSDn();
  const int &NoORNbLooseJMSDn();
  const int &NoORNbMediumJMSDn();
  const int &NoORNbTightJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMSDn();
  const float &MVVXJMSDn();
  const float &PtVVXJMSDn();
  const float &HTJMSDn();
  const float &HTJJMSDn();
  const float &HTFJJMSDn();
  const float &SumPtFJJMSDn();
  const float &SumPtJJMSDn();
  const int &NFJJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMRUp();
  const float &VMD0JMRUp();
  const float &VMD1JMRUp();
  const float &VMD2JMRUp();
  const float &VMD3JMRUp();
  const float &VMD4JMRUp();
  const float &WMD0JMRUp();
  const float &WMD1JMRUp();
  const float &WMD2JMRUp();
  const float &WMD3JMRUp();
  const float &WMD4JMRUp();
  const int &NQGen0JMRUp();
  const int &NQGen1JMRUp();
  const int &NQGen2JMRUp();
  const int &NQGen3JMRUp();
  const int &NQGen4JMRUp();
  const int &NBGen0JMRUp();
  const int &NBGen1JMRUp();
  const int &NBGen2JMRUp();
  const int &NBGen3JMRUp();
  const int &NBGen4JMRUp();
  const int &NLGen0JMRUp();
  const int &NLGen1JMRUp();
  const int &NLGen2JMRUp();
  const int &NLGen3JMRUp();
  const int &NLGen4JMRUp();
  const int &NiFJJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMRUp();
  const float &iVMD0JMRUp();
  const float &iVMD1JMRUp();
  const float &iVMD2JMRUp();
  const float &iVMD3JMRUp();
  const float &iVMD4JMRUp();
  const float &iWMD0JMRUp();
  const float &iWMD1JMRUp();
  const float &iWMD2JMRUp();
  const float &iWMD3JMRUp();
  const float &iWMD4JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMRUp();
  const int &NJJMRUp();
  const int &NbLooseJMRUp();
  const int &NbMediumJMRUp();
  const int &NbTightJMRUp();
  const int &NoORNbLooseJMRUp();
  const int &NoORNbMediumJMRUp();
  const int &NoORNbTightJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMRUp();
  const float &MVVXJMRUp();
  const float &PtVVXJMRUp();
  const float &HTJMRUp();
  const float &HTJJMRUp();
  const float &HTFJJMRUp();
  const float &SumPtFJJMRUp();
  const float &SumPtJJMRUp();
  const int &NFJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMRDn();
  const float &VMD0JMRDn();
  const float &VMD1JMRDn();
  const float &VMD2JMRDn();
  const float &VMD3JMRDn();
  const float &VMD4JMRDn();
  const float &WMD0JMRDn();
  const float &WMD1JMRDn();
  const float &WMD2JMRDn();
  const float &WMD3JMRDn();
  const float &WMD4JMRDn();
  const int &NQGen0JMRDn();
  const int &NQGen1JMRDn();
  const int &NQGen2JMRDn();
  const int &NQGen3JMRDn();
  const int &NQGen4JMRDn();
  const int &NBGen0JMRDn();
  const int &NBGen1JMRDn();
  const int &NBGen2JMRDn();
  const int &NBGen3JMRDn();
  const int &NBGen4JMRDn();
  const int &NLGen0JMRDn();
  const int &NLGen1JMRDn();
  const int &NLGen2JMRDn();
  const int &NLGen3JMRDn();
  const int &NLGen4JMRDn();
  const int &NiFJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMRDn();
  const float &iVMD0JMRDn();
  const float &iVMD1JMRDn();
  const float &iVMD2JMRDn();
  const float &iVMD3JMRDn();
  const float &iVMD4JMRDn();
  const float &iWMD0JMRDn();
  const float &iWMD1JMRDn();
  const float &iWMD2JMRDn();
  const float &iWMD3JMRDn();
  const float &iWMD4JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMRDn();
  const int &NJJMRDn();
  const int &NbLooseJMRDn();
  const int &NbMediumJMRDn();
  const int &NbTightJMRDn();
  const int &NoORNbLooseJMRDn();
  const int &NoORNbMediumJMRDn();
  const int &NoORNbTightJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMRDn();
  const float &MVVXJMRDn();
  const float &PtVVXJMRDn();
  const float &HTJMRDn();
  const float &HTJJMRDn();
  const float &HTFJJMRDn();
  const float &SumPtFJJMRDn();
  const float &SumPtJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV2();
  const int &isHad0();
  const int &isHad1();
  const int &isHad2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF00();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF01();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF10();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF11();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF20();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF21();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern VVV0Tree vvv;
#endif

namespace tas {
  const int &isData();
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &year();
  const float &genWeight();
  const float &wgt();
  const vector<float> &LHEReweightingWeight();
  const float &prefireWgt();
  const float &prefireWgtUp();
  const float &prefireWgtDn();
  const float &puWgt();
  const float &puWgtUp();
  const float &puWgtDn();
  const float &trigWgt();
  const float &trigWgtUp();
  const float &trigWgtDn();
  const int &trigger();
  const int &is0Lep();
  const int &is1Lep();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &Lep();
  const int &LepFlav();
  const int &NFJ();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4();
  const float &VMD0();
  const float &VMD1();
  const float &VMD2();
  const float &VMD3();
  const float &VMD4();
  const float &WMD0();
  const float &WMD1();
  const float &WMD2();
  const float &WMD3();
  const float &WMD4();
  const int &NQGen0();
  const int &NQGen1();
  const int &NQGen2();
  const int &NQGen3();
  const int &NQGen4();
  const int &NBGen0();
  const int &NBGen1();
  const int &NBGen2();
  const int &NBGen3();
  const int &NBGen4();
  const int &NLGen0();
  const int &NLGen1();
  const int &NLGen2();
  const int &NLGen3();
  const int &NLGen4();
  const int &NiFJ();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4();
  const float &iVMD0();
  const float &iVMD1();
  const float &iVMD2();
  const float &iVMD3();
  const float &iVMD4();
  const float &iWMD0();
  const float &iWMD1();
  const float &iWMD2();
  const float &iWMD3();
  const float &iWMD4();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &MET();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &Nu();
  const int &NJ();
  const int &NbLoose();
  const int &NbMedium();
  const int &NbTight();
  const int &NoORNbLoose();
  const int &NoORNbMedium();
  const int &NoORNbTight();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4();
  const float &MVVX();
  const float &PtVVX();
  const float &HT();
  const float &HTJ();
  const float &HTFJ();
  const float &SumPtFJ();
  const float &SumPtJ();
  const int &NFJJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JESUp();
  const float &VMD0JESUp();
  const float &VMD1JESUp();
  const float &VMD2JESUp();
  const float &VMD3JESUp();
  const float &VMD4JESUp();
  const float &WMD0JESUp();
  const float &WMD1JESUp();
  const float &WMD2JESUp();
  const float &WMD3JESUp();
  const float &WMD4JESUp();
  const int &NQGen0JESUp();
  const int &NQGen1JESUp();
  const int &NQGen2JESUp();
  const int &NQGen3JESUp();
  const int &NQGen4JESUp();
  const int &NBGen0JESUp();
  const int &NBGen1JESUp();
  const int &NBGen2JESUp();
  const int &NBGen3JESUp();
  const int &NBGen4JESUp();
  const int &NLGen0JESUp();
  const int &NLGen1JESUp();
  const int &NLGen2JESUp();
  const int &NLGen3JESUp();
  const int &NLGen4JESUp();
  const int &NiFJJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JESUp();
  const float &iVMD0JESUp();
  const float &iVMD1JESUp();
  const float &iVMD2JESUp();
  const float &iVMD3JESUp();
  const float &iVMD4JESUp();
  const float &iWMD0JESUp();
  const float &iWMD1JESUp();
  const float &iWMD2JESUp();
  const float &iWMD3JESUp();
  const float &iWMD4JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJESUp();
  const int &NJJESUp();
  const int &NbLooseJESUp();
  const int &NbMediumJESUp();
  const int &NbTightJESUp();
  const int &NoORNbLooseJESUp();
  const int &NoORNbMediumJESUp();
  const int &NoORNbTightJESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JESUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JESUp();
  const float &MVVXJESUp();
  const float &PtVVXJESUp();
  const float &HTJESUp();
  const float &HTJJESUp();
  const float &HTFJJESUp();
  const float &SumPtFJJESUp();
  const float &SumPtJJESUp();
  const int &NFJJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JESDn();
  const float &VMD0JESDn();
  const float &VMD1JESDn();
  const float &VMD2JESDn();
  const float &VMD3JESDn();
  const float &VMD4JESDn();
  const float &WMD0JESDn();
  const float &WMD1JESDn();
  const float &WMD2JESDn();
  const float &WMD3JESDn();
  const float &WMD4JESDn();
  const int &NQGen0JESDn();
  const int &NQGen1JESDn();
  const int &NQGen2JESDn();
  const int &NQGen3JESDn();
  const int &NQGen4JESDn();
  const int &NBGen0JESDn();
  const int &NBGen1JESDn();
  const int &NBGen2JESDn();
  const int &NBGen3JESDn();
  const int &NBGen4JESDn();
  const int &NLGen0JESDn();
  const int &NLGen1JESDn();
  const int &NLGen2JESDn();
  const int &NLGen3JESDn();
  const int &NLGen4JESDn();
  const int &NiFJJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JESDn();
  const float &iVMD0JESDn();
  const float &iVMD1JESDn();
  const float &iVMD2JESDn();
  const float &iVMD3JESDn();
  const float &iVMD4JESDn();
  const float &iWMD0JESDn();
  const float &iWMD1JESDn();
  const float &iWMD2JESDn();
  const float &iWMD3JESDn();
  const float &iWMD4JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJESDn();
  const int &NJJESDn();
  const int &NbLooseJESDn();
  const int &NbMediumJESDn();
  const int &NbTightJESDn();
  const int &NoORNbLooseJESDn();
  const int &NoORNbMediumJESDn();
  const int &NoORNbTightJESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JESDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JESDn();
  const float &MVVXJESDn();
  const float &PtVVXJESDn();
  const float &HTJESDn();
  const float &HTJJESDn();
  const float &HTFJJESDn();
  const float &SumPtFJJESDn();
  const float &SumPtJJESDn();
  const int &NFJJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JERUp();
  const float &VMD0JERUp();
  const float &VMD1JERUp();
  const float &VMD2JERUp();
  const float &VMD3JERUp();
  const float &VMD4JERUp();
  const float &WMD0JERUp();
  const float &WMD1JERUp();
  const float &WMD2JERUp();
  const float &WMD3JERUp();
  const float &WMD4JERUp();
  const int &NQGen0JERUp();
  const int &NQGen1JERUp();
  const int &NQGen2JERUp();
  const int &NQGen3JERUp();
  const int &NQGen4JERUp();
  const int &NBGen0JERUp();
  const int &NBGen1JERUp();
  const int &NBGen2JERUp();
  const int &NBGen3JERUp();
  const int &NBGen4JERUp();
  const int &NLGen0JERUp();
  const int &NLGen1JERUp();
  const int &NLGen2JERUp();
  const int &NLGen3JERUp();
  const int &NLGen4JERUp();
  const int &NiFJJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JERUp();
  const float &iVMD0JERUp();
  const float &iVMD1JERUp();
  const float &iVMD2JERUp();
  const float &iVMD3JERUp();
  const float &iVMD4JERUp();
  const float &iWMD0JERUp();
  const float &iWMD1JERUp();
  const float &iWMD2JERUp();
  const float &iWMD3JERUp();
  const float &iWMD4JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJERUp();
  const int &NJJERUp();
  const int &NbLooseJERUp();
  const int &NbMediumJERUp();
  const int &NbTightJERUp();
  const int &NoORNbLooseJERUp();
  const int &NoORNbMediumJERUp();
  const int &NoORNbTightJERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JERUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JERUp();
  const float &MVVXJERUp();
  const float &PtVVXJERUp();
  const float &HTJERUp();
  const float &HTJJERUp();
  const float &HTFJJERUp();
  const float &SumPtFJJERUp();
  const float &SumPtJJERUp();
  const int &NFJJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JERDn();
  const float &VMD0JERDn();
  const float &VMD1JERDn();
  const float &VMD2JERDn();
  const float &VMD3JERDn();
  const float &VMD4JERDn();
  const float &WMD0JERDn();
  const float &WMD1JERDn();
  const float &WMD2JERDn();
  const float &WMD3JERDn();
  const float &WMD4JERDn();
  const int &NQGen0JERDn();
  const int &NQGen1JERDn();
  const int &NQGen2JERDn();
  const int &NQGen3JERDn();
  const int &NQGen4JERDn();
  const int &NBGen0JERDn();
  const int &NBGen1JERDn();
  const int &NBGen2JERDn();
  const int &NBGen3JERDn();
  const int &NBGen4JERDn();
  const int &NLGen0JERDn();
  const int &NLGen1JERDn();
  const int &NLGen2JERDn();
  const int &NLGen3JERDn();
  const int &NLGen4JERDn();
  const int &NiFJJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JERDn();
  const float &iVMD0JERDn();
  const float &iVMD1JERDn();
  const float &iVMD2JERDn();
  const float &iVMD3JERDn();
  const float &iVMD4JERDn();
  const float &iWMD0JERDn();
  const float &iWMD1JERDn();
  const float &iWMD2JERDn();
  const float &iWMD3JERDn();
  const float &iWMD4JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJERDn();
  const int &NJJERDn();
  const int &NbLooseJERDn();
  const int &NbMediumJERDn();
  const int &NbTightJERDn();
  const int &NoORNbLooseJERDn();
  const int &NoORNbMediumJERDn();
  const int &NoORNbTightJERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JERDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JERDn();
  const float &MVVXJERDn();
  const float &PtVVXJERDn();
  const float &HTJERDn();
  const float &HTJJERDn();
  const float &HTFJJERDn();
  const float &SumPtFJJERDn();
  const float &SumPtJJERDn();
  const int &NFJJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMSUp();
  const float &VMD0JMSUp();
  const float &VMD1JMSUp();
  const float &VMD2JMSUp();
  const float &VMD3JMSUp();
  const float &VMD4JMSUp();
  const float &WMD0JMSUp();
  const float &WMD1JMSUp();
  const float &WMD2JMSUp();
  const float &WMD3JMSUp();
  const float &WMD4JMSUp();
  const int &NQGen0JMSUp();
  const int &NQGen1JMSUp();
  const int &NQGen2JMSUp();
  const int &NQGen3JMSUp();
  const int &NQGen4JMSUp();
  const int &NBGen0JMSUp();
  const int &NBGen1JMSUp();
  const int &NBGen2JMSUp();
  const int &NBGen3JMSUp();
  const int &NBGen4JMSUp();
  const int &NLGen0JMSUp();
  const int &NLGen1JMSUp();
  const int &NLGen2JMSUp();
  const int &NLGen3JMSUp();
  const int &NLGen4JMSUp();
  const int &NiFJJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMSUp();
  const float &iVMD0JMSUp();
  const float &iVMD1JMSUp();
  const float &iVMD2JMSUp();
  const float &iVMD3JMSUp();
  const float &iVMD4JMSUp();
  const float &iWMD0JMSUp();
  const float &iWMD1JMSUp();
  const float &iWMD2JMSUp();
  const float &iWMD3JMSUp();
  const float &iWMD4JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMSUp();
  const int &NJJMSUp();
  const int &NbLooseJMSUp();
  const int &NbMediumJMSUp();
  const int &NbTightJMSUp();
  const int &NoORNbLooseJMSUp();
  const int &NoORNbMediumJMSUp();
  const int &NoORNbTightJMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMSUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMSUp();
  const float &MVVXJMSUp();
  const float &PtVVXJMSUp();
  const float &HTJMSUp();
  const float &HTJJMSUp();
  const float &HTFJJMSUp();
  const float &SumPtFJJMSUp();
  const float &SumPtJJMSUp();
  const int &NFJJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMSDn();
  const float &VMD0JMSDn();
  const float &VMD1JMSDn();
  const float &VMD2JMSDn();
  const float &VMD3JMSDn();
  const float &VMD4JMSDn();
  const float &WMD0JMSDn();
  const float &WMD1JMSDn();
  const float &WMD2JMSDn();
  const float &WMD3JMSDn();
  const float &WMD4JMSDn();
  const int &NQGen0JMSDn();
  const int &NQGen1JMSDn();
  const int &NQGen2JMSDn();
  const int &NQGen3JMSDn();
  const int &NQGen4JMSDn();
  const int &NBGen0JMSDn();
  const int &NBGen1JMSDn();
  const int &NBGen2JMSDn();
  const int &NBGen3JMSDn();
  const int &NBGen4JMSDn();
  const int &NLGen0JMSDn();
  const int &NLGen1JMSDn();
  const int &NLGen2JMSDn();
  const int &NLGen3JMSDn();
  const int &NLGen4JMSDn();
  const int &NiFJJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMSDn();
  const float &iVMD0JMSDn();
  const float &iVMD1JMSDn();
  const float &iVMD2JMSDn();
  const float &iVMD3JMSDn();
  const float &iVMD4JMSDn();
  const float &iWMD0JMSDn();
  const float &iWMD1JMSDn();
  const float &iWMD2JMSDn();
  const float &iWMD3JMSDn();
  const float &iWMD4JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMSDn();
  const int &NJJMSDn();
  const int &NbLooseJMSDn();
  const int &NbMediumJMSDn();
  const int &NbTightJMSDn();
  const int &NoORNbLooseJMSDn();
  const int &NoORNbMediumJMSDn();
  const int &NoORNbTightJMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMSDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMSDn();
  const float &MVVXJMSDn();
  const float &PtVVXJMSDn();
  const float &HTJMSDn();
  const float &HTJJMSDn();
  const float &HTFJJMSDn();
  const float &SumPtFJJMSDn();
  const float &SumPtJJMSDn();
  const int &NFJJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMRUp();
  const float &VMD0JMRUp();
  const float &VMD1JMRUp();
  const float &VMD2JMRUp();
  const float &VMD3JMRUp();
  const float &VMD4JMRUp();
  const float &WMD0JMRUp();
  const float &WMD1JMRUp();
  const float &WMD2JMRUp();
  const float &WMD3JMRUp();
  const float &WMD4JMRUp();
  const int &NQGen0JMRUp();
  const int &NQGen1JMRUp();
  const int &NQGen2JMRUp();
  const int &NQGen3JMRUp();
  const int &NQGen4JMRUp();
  const int &NBGen0JMRUp();
  const int &NBGen1JMRUp();
  const int &NBGen2JMRUp();
  const int &NBGen3JMRUp();
  const int &NBGen4JMRUp();
  const int &NLGen0JMRUp();
  const int &NLGen1JMRUp();
  const int &NLGen2JMRUp();
  const int &NLGen3JMRUp();
  const int &NLGen4JMRUp();
  const int &NiFJJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMRUp();
  const float &iVMD0JMRUp();
  const float &iVMD1JMRUp();
  const float &iVMD2JMRUp();
  const float &iVMD3JMRUp();
  const float &iVMD4JMRUp();
  const float &iWMD0JMRUp();
  const float &iWMD1JMRUp();
  const float &iWMD2JMRUp();
  const float &iWMD3JMRUp();
  const float &iWMD4JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMRUp();
  const int &NJJMRUp();
  const int &NbLooseJMRUp();
  const int &NbMediumJMRUp();
  const int &NbTightJMRUp();
  const int &NoORNbLooseJMRUp();
  const int &NoORNbMediumJMRUp();
  const int &NoORNbTightJMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMRUp();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMRUp();
  const float &MVVXJMRUp();
  const float &PtVVXJMRUp();
  const float &HTJMRUp();
  const float &HTJJMRUp();
  const float &HTFJJMRUp();
  const float &SumPtFJJMRUp();
  const float &SumPtJJMRUp();
  const int &NFJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &FJ4JMRDn();
  const float &VMD0JMRDn();
  const float &VMD1JMRDn();
  const float &VMD2JMRDn();
  const float &VMD3JMRDn();
  const float &VMD4JMRDn();
  const float &WMD0JMRDn();
  const float &WMD1JMRDn();
  const float &WMD2JMRDn();
  const float &WMD3JMRDn();
  const float &WMD4JMRDn();
  const int &NQGen0JMRDn();
  const int &NQGen1JMRDn();
  const int &NQGen2JMRDn();
  const int &NQGen3JMRDn();
  const int &NQGen4JMRDn();
  const int &NBGen0JMRDn();
  const int &NBGen1JMRDn();
  const int &NBGen2JMRDn();
  const int &NBGen3JMRDn();
  const int &NBGen4JMRDn();
  const int &NLGen0JMRDn();
  const int &NLGen1JMRDn();
  const int &NLGen2JMRDn();
  const int &NLGen3JMRDn();
  const int &NLGen4JMRDn();
  const int &NiFJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &iFJ4JMRDn();
  const float &iVMD0JMRDn();
  const float &iVMD1JMRDn();
  const float &iVMD2JMRDn();
  const float &iVMD3JMRDn();
  const float &iVMD4JMRDn();
  const float &iWMD0JMRDn();
  const float &iWMD1JMRDn();
  const float &iWMD2JMRDn();
  const float &iWMD3JMRDn();
  const float &iWMD4JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &METJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &NuJMRDn();
  const int &NJJMRDn();
  const int &NbLooseJMRDn();
  const int &NbMediumJMRDn();
  const int &NbTightJMRDn();
  const int &NoORNbLooseJMRDn();
  const int &NoORNbMediumJMRDn();
  const int &NoORNbTightJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J0JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J1JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J2JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J3JMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &J4JMRDn();
  const float &MVVXJMRDn();
  const float &PtVVXJMRDn();
  const float &HTJMRDn();
  const float &HTJJMRDn();
  const float &HTFJJMRDn();
  const float &SumPtFJJMRDn();
  const float &SumPtJJMRDn();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenV2();
  const int &isHad0();
  const int &isHad1();
  const int &isHad2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF00();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF01();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF10();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF11();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF20();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &GenF21();
}
#endif
